#!/usr/bin/env zsh
#
# timgallery -- a simple gallery wrapper for timg
#
# Takes the same arguments as timg. Displays one image at a time; cycle through
# them with n (next) and p (previous), and quit with q. Images which are HTTP(S)
# URLs will be automatically downloaded with curl the first time you view them.
#
# Uses the alternate terminal buffer so it doesn't stomp on your backscroll, and
# is compatible with timg's -pk and -pi modes.

declare -a IMGS=()
declare -a TITLES=()
declare -a FLAGS=()
declare IMG=1
declare ALLOW_TMUX=1

setopt nomonitor nonotify nofunctionargzero

function main {
  trap cleanup EXIT
  mkdir /tmp/$$

  local escape_tmux=0
  parse-args "$@"
  (( ${#IMGS[@]} == 0 )) && exit 1
  if [[ $TMUX_PANE ]] && (( escape_tmux )); then
    # If escape_tmux is set, we were invoked with arguments that are incompatible
    # with tmux. So we need to relaunch ourself outside tmux.
    local session="$(tmux display-message -p '#S')"
    printf '%s\0' "$@" > /tmp/$$/argv
    tmux detach -E "xargs -0 -a /tmp/$$/argv echo; sleep 5; tmux attach -t '$session'"
    exit $?
  fi

  tput smcup
  redraw
  while true; do
    read -k key
    case $key in
      ' '|n) next-img ;;
      p) prev-img ;;
      q) exit 0 ;;
    esac
    redraw
  done
}

function parse-args {
  local doneflags
  for arg in "$@"; do
    case $arg in
      --) doneflags=1 ;;
      -pk|-pi)
        escape_tmux=1
        ;&
      -*)
        if (( ! doneflags )); then
          FLAGS+=($arg)
          continue
        fi
        ;&
      *)
        IMGS+=($arg)
        TITLES+=($arg)
        ;;
    esac
  done
}

TIMG_PID=0
function kill-timg {
  (( TIMG_PID )) || return
  [[ -d /proc/$TIMG_PID ]] || return
  ppid="$(cat /proc/$TIMG_PID/stat | cut -d' ' -f4)"
  [[ $ppid == $$ ]] || return
  kill $TIMG_PID
  wait $TIMG_PID
  TIMG_PID=0
}

function redraw {
  kill-timg
  tput clear
  tput cup 999 0
  printf '[%d/%d] \x1B[1m%s\x1B[0m %s' \
    $IMG $#IMGS $TITLES[$IMG] "$(date)"
  tput cup 0 0
  if [[ $IMGS[$IMG] == http* ]]; then
    curl $IMGS[$IMG] > /tmp/$$/$IMG
    IMGS[$IMG]=/tmp/$$/$IMG
    printf '\n\x1B[1J' # CSI 1 J: erase above
    tput cup 0 0
  fi
  command timg -gx$((LINES-1)) $FLAGS[@] $IMGS[$IMG] &
  sleep 0.1
  TIMG_PID=$!
}

function cleanup {
  kill-timg
  tput rmcup
  rm -rf /tmp/$$
}

function prev-img {
  (( IMG-- ))
  if (( IMG <= 0 )); then IMG=1; fi
}

function next-img {
  (( IMG++ ))
  if (( IMG > ${#IMGS[@]} )); then IMG=$#IMGS; fi
}

main "$@"
