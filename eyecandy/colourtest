#!/usr/bin/env bash

# Default settings
BPP=24
CUBE_256=1
CUBE_RGB=0
ATTRS=1
FONTS=0
RGB_TEST=0
# SGR field (not command) separator -- the standard is : for the former and
# ; for the latter, but some terminals use ; for both.
SGR_FS=:
# Whether to include a dummy colourspace ID in RGB colour codes.
# Some terminals require it, some reject it, some don't care.
RGB_CS=1

while [[ $1 ]]; do
  case "$1" in
    # Monochrome terminal; show attrs only
    --1bpp|--mono) BPP=1 ;;
    # 16-colour terminal
    --4bpp|--16) BPP=4 ;;
    # 256-colour terminal
    --8bpp|--256) BPP=8 ;;
    # direct (RGB) colour terminal
    --24bpp|--rgb) BPP=24 ;;
    # Display 8bpp palette linearly rather than as a colour cube
    --256-cube) CUBE_256=1 ;;
    --no-256-cube) CUBE_256=0 ;;
    # Display a rainbow gradient for RGB rather than a colour cube
    --rgb-cube) CUBE_RGB=1 ;;
    --no-rgb-cube) CUBE_RGB=0 ;;
    # Display text attributes at the bottom
    --attrs) ATTRS=1 ;;
    --no-attrs) ATTRS=0 ;;
    # Display brief test patterns for box drawing, Powerline, and NerdFonts
    --fonts) FONTS=1 ;;
    --no-fonts) FONTS=0 ;;
    # Use ; instead of : for 8bpp/24bpp modes
    --legacy-sgr) SGR_FS=';' ;;
    --no-legacy-sgr) SGR_FS=':' ;;
    # Include colourspace ID in 24bpp mode
    --rgb-cs) RGB_CS=1 ;;
    --no-rgb-cs) RGB_CS=0 ;;
    # Special RGB test mode
    --rgb-test) RGB_TEST=1 ;;
    # help!
    -h|--help|*)
      >&2 echo "Usage: colourtest [--(1|4|8|24)bpp] [--feature|--no-feature]..."
      >&2 echo "Features: 256-cube, rgb-cube, attrs, fonts, legacy-sgr, rgb-cs"
      >&2 echo "If the 8bpp or 24bpp colours come out messed up or confuse your"
      >&2 echo "terminal, experiment with the legacy-sgr and rgb-cs features."
      exit
      ;;
  esac
  shift
done

function heading {
  printf '\n%10s \x1B[1m%-60s%s\x1B[0m\n' '' "$@"
}

function fixsgr {
  local fmt="$1"; shift
  (( RGB_CS )) && fmt="${fmt/8:2:/8:2:0:}"
  printf "${fmt//:/${SGR_FS}}" "$@"
}

function bg { echo $(( $1+10 )); }
function fgbg { echo "$1;$(( $1+10 ))"; }
function map { f=$1; shift; while [[ $1 ]]; do $f $1; shift; done; }
function printf3 {
  local fmt="$1"; shift
  for arg in "$@"; do printf "$fmt" "$arg" "$arg" "$arg"; done
}

# First, do 8-colour palette, in both ANSI (30-37) and AIX (90-97) colours
codes=(30 31 32 33 34 35 36 37 90 91 92 93 94 95 96 97)
function show-16colours {
  heading \
    "ANSI & AIXTerm 8-colour palettes (dim - plain - bold)" \
    "CSI C m"
  printf '%10s ' 'colour'
  printf ' %3d' ${codes[@]}
  printf '\n'

  printf '%10s ' 'fg'
  printf3 ' \x1B[0;%d;2m#\x1B[0;%dm#\x1B[%d;1m#' ${codes[@]}
  printf '\x1B[0m\n'

  printf '%10s ' 'bg'
  printf3 '\x1B[0m \x1B[%d;2m \x1B[0;%dm \x1B[%d;1m ' $(map bg ${codes[@]})
  printf '\x1B[0;1m  +10 for bg\x1B[0m\n'

  printf '%10s ' 'fg+bg'
  printf3 '\x1B[0m \x1B[%s;2m#\x1B[0;%sm#\x1B[%s;1m#' $(map fgbg ${codes[@]})
  printf '\x1B[0m\n'
}

# 256-colour palette is usually laid out as:
# [00-0f] 16-colour palette at the start
# [10-e7] 6x6x6 (=216) colours
# [e8-ff] greyscale
# this just prints it out raw
function show-256linear {
  printf '%10s     \x1B[4mraw palette\x1B[0m\n'
  printf '%6s' ''
  printf '%4s 0123456789ABCDEF' '' '' '' ''
  printf '\n'
  for i in {0..3}; do
    printf '%10x ' $i
    printf '\x1B[48:5:%dm ' $(seq $((16*i)) $((16*i+15)))
    printf '\x1B[0m%4x ' $((i+4))
    printf '\x1B[48:5:%dm ' $(seq $((16*(i+4))) $((16*(i+4)+15)))
    printf '\x1B[0m%4x ' $((i+8))
    printf '\x1B[48:5:%dm ' $(seq $((16*(i+8))) $((16*(i+8)+15)))
    printf '\x1B[0m%4x ' $((i+12))
    printf '\x1B[48:5:%dm ' $(seq $((16*(i+12))) $((16*(i+12)+15)))
    printf '\x1B[0m\n'
  done
}

# this prints it with a bit more organization that makes it easier to look up
# by colour, but harder to look up by number
function show-256cube {
  printf '%10s     \x1B[4m%s\x1B[0m\n' '' "216-colour cube (16-231)"
  printf '%10s '
  printf '%-8s' $(seq 16 36 220)
  printf '\n'

  # each row is a different G
  for g in {0..5}; do
    printf '%10s ' "+$((g*6))"
    # each box is a different R
    for r in {0..5}; do
      # and then within each row of each box, B increases to the left
      base=$(( 0x10 + r*36 + g*6 ))
      fixsgr '\x1B[48:5:%dm ' $(seq $base $((base+5)))
      printf '\x1B[0m  '
    done
    case $g in
      0)
        printf '  \x1B[4m16-colour (0-15)\x1B[0m'
        ;;
      1)
        printf ' ['
        fixsgr '\x1B[48:5:%dm ' $(seq 0 15)
        printf '\x1B[0m]'
        ;;
      3)
        printf '  \x1B[4mgreyscale (232-255)\x1B[0m'
        ;;
      4)
        printf ' ['
        fixsgr '\x1B[48:5:%dm ' $(seq 232 255)
        printf '\x1B[0m]'
    esac
    printf '\n'
  done
}

# Display a single-line stripe of RGB to make sure it's working, without
# trying to display the whole colour cube.
function show-rgblinear {
  if [[ $1 ]]; then
    heading "$@"
  else
    printf '%10s     \x1B[4m%s\x1B[0m\n' '' "Linear gradient (8 colours, 10 steps between colours)"
  fi
  printf '          ['
  fixsgr '\x1B[48:2:0:0:0m '                       # black
  fixsgr '\x1B[48:2:%d:0:0m '     $(seq 5 25 255)  # black to red
  fixsgr '\x1B[48:2:255:%d:0m '   $(seq 5 25 255)  # red to yellow
  fixsgr '\x1B[48:2:%d:255:0m '   $(seq 255 -25 5) # yellow to green
  fixsgr '\x1B[48:2:0:255:%dm '   $(seq 5 25 255)  # green to cyan
  fixsgr '\x1B[48:2:0:%d:255m '   $(seq 255 -25 5) # cyan to blue
  fixsgr '\x1B[48:2:%d:0:255m '   $(seq 5 25 255)  # blue to magenta
  fixsgr '\x1B[48:2:255:%d:255m ' $(seq 5 25 255)  # magenta to white
  printf ' \x1B[0m]\n'
  if [[ ! $1 ]]; then
    printf '           '
    printf '%-11s' K R Y G C B M
    printf ' W\n'
  fi
}

# RGB888
# if we sample every 32nd colour, i.e. stride each one from 0 to 255 in steps of 32,
# we can probably fit them all on screen, and this gives a higher colour resolution
# than the 6x6x6 cube above still
function show-rgbcube {
  printf '%10s     \x1B[4mColour cube (8 samples per axis)\x1B[0m\n'
  # as with the 256 cube, each row is G, each box is R, and B varies across cells
  printf '%10s R='
  printf ' %-3d      ' $(seq 31 32 256)
  printf '\n'
  printf '         B='
  printf ' 31-255%s   ' '' '' '' '' '' '' '' ''
  printf '\n'
  for g in $(seq 31 32 255); do
    if (( g==31 )); then
      printf '   G= %3d  ' $g
    else
      printf '%9d  ' $g
    fi
    for r in $(seq 31 32 255); do
      printf "\x1B[48;2;$r;$g;%dm " $(seq 31 32 255)
      printf '\x1B[0m  '
    done
    printf '%3d' $g
    printf '\n'
  done
}

function show-attrs {
  heading \
    "Non-colour text attributes" "CSI A m"

  function formatcode {
    local len="$(echo "$2" | wc -c)"
    if ((len <= 12)); then
      printf "%2d  ▶\x1B[%dm%s\x1B[0m◀%-$((12-len))s" "$1" "$1" "$2" ""
    else
      printf "%2d  ▶\x1B[%dm%s\x1B[0m◀%-$((29-len))s" "$1" "$1" "$2" ""
    fi
    if [[ $3 ]]; then
      shift 2; formatcode "$@"
    fi
  }

  printf '       '
  formatcode 1 bold 2 faint 3 italic 4 underline 5 blink
  printf '\n       '
  formatcode 7 inverse 8 invisible
  printf '\b(invisible)       '
  formatcode 9 strikethrough
  printf '\n        0  reset all formatting          22  disable bold/faint         23-29  disable 3-9\n'
}

function show-fonts {
  # Box drawing characters are unicode and inserted as-is.
  # Likewise powerline and NF characters, which use Unicode private areas
  # and will render, or not, depending on what fonts the user has installed.
  # The DEC line includes shift-in/shift-out characters, which will render it
  # as various drawing characters on ttys that support those.
  local SO=$'\x0E'
  local SI=$'\x0F'
  local B=$'\e[1m'
  local O=$'\e[0m'
  echo
  cat <<EOF
           ┏━┫${B}Font Test${O}╞═════════════════════════════════════════════════════════════════╗
           ┃  ASCII \`abcdefghijklmnopqrstuvwxyz{|}~+,-.0123456789!"#$%&'()*/:;<=>?@[\]^_ ║
           ┃    DEC ${SO}\`abcdefghijklmnopqrstuvwxyz{|}~+,-.0      ABCDEFGHIJKLMNOPQRSTUVWXYZ${SI} ║
           ┃  Powerline: []  Nerd-Font: [⏻󰀁]  Blocks: ▁▂▃▄▅▆▇█▉▊▋▌▍▎▏  ║
           ┗━━╍╍┅┅┉┉                                       ┈┈┄┄╌╌──┤Unicode Box Drawing╞═╝
EOF
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
}

if (( RGB_TEST )); then
  SGR_FS=':' RGB_CS=1 show-rgblinear "  ITU format, with colourspace" "CSI 38:2:0:R:G:B m"
  SGR_FS=':' RGB_CS=0 show-rgblinear "  ITU format,   no colourspace" "CSI   38:2:R:G:B m"
  SGR_FS=';' RGB_CS=1 show-rgblinear "XTerm format, with colourspace" "CSI 38;2;0;R;G;B m"
  SGR_FS=';' RGB_CS=0 show-rgblinear "XTerm format,   no colourspace" "CSI   38;2;R;G;B m"
  exit 0
fi

(( BPP >= 4 )) && show-16colours

if (( BPP >= 8 )); then
  heading \
    "256-colour indexed" \
    "$(fixsgr "CSI 38:5:I m")"
  (( CUBE_256 )) || show-256linear
  (( CUBE_256 )) && show-256cube
fi

if (( BPP >= 24 )); then
  heading \
    "RGB direct colour (24bpp, 8 bits/channel)" \
    "$(fixsgr "CSI 38:2:R:G:B m")"
  (( CUBE_RGB )) || show-rgblinear
  (( CUBE_RGB )) && show-rgbcube
fi

(( ATTRS )) && show-attrs
(( FONTS )) && show-fonts

exit 0

#formatcode \
#  0 reset 1 bold 2 faint \
#  3 italic 4 underline 5 blink \
#  7 inverse 8 $'invisible\x1B[0m (invisible)\n' \
#  9 strikethrough

#map formatcode \
#  "2:faint" "22:regular" "1:bold" \
#  "3:italics" "4:underline" "5:blink" \
#  "7:inverse" "9:strikethrough" "8:invisible" \
#  "21:double-underlined" "0:reset"

# for 2-9, adding 20 will disable that attribute, e.g. 24 turns off underline without affecting things otherwise

#printf '%10s ' ''
#printf '%8s ' bold
# bold
# italic
# faint
# inverse video
#
