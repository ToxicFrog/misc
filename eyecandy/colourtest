#!/usr/bin/env zsh

# First, do 8-colour palette, in both ANSI (30-37) and AIX (90-97) colours

codes=(30 31 32 33 34 35 36 37 90 91 92 93 94 95 96 97)

function bg { echo $(( $1+10 )); }
function fgbg { echo "$1;$(( $1+10 ))"; }
function map { f=$1; shift; while [[ $1 ]]; do $f $1; shift; done; }

printf '%10s \x1B[1m%-64s%s\x1B[0m\n' '' \
  "ANSI & AIXTerm 8-colour palettes (dim - plain - bright)" \
  "SGR C m"
printf '%10s ' 'colour'
printf ' %3d' ${codes[@]}
printf '\n'

printf '%10s ' 'fg'
printf ' \x1B[%1$d;2m#\x1B[0;%1$dm#\x1B[%1$d;1m#' ${codes[@]}
printf '\x1B[0m\n'

printf '%10s ' 'bg'
printf '\x1B[0m \x1B[%1$d;2m \x1B[0;%1$dm \x1B[%1$d;1m ' $(map bg ${codes[@]})
printf '\x1B[0m\n'

printf '%10s ' 'fg+bg'
printf '\x1B[0m \x1B[%1$s;2m#\x1B[0;%1$sm#\x1B[%1$s;1m#' $(map fgbg ${codes[@]})
printf '\x1B[0m\n\n'

# 256-colour palette is usually laid out as:
# [00-0f] 16-colour palette at the start
# [10-e7] 6x6x6 (=216) colours
# [e8-ff] greyscale
# this just prints it out raw
printf '%10s \x1B[1m%-64s%s\x1B[0m\n' '' \
  "256-colour indexed" \
  "SGR 38;5;I m"
printf '%10s     \x1B[4mraw palette\x1B[0m\n'
printf '%6s' ''
printf '%4s 0123456789ABCDEF' '' '' '' ''
printf '\n'
for i in {0..3}; do
  printf '%10x ' $i
  printf '\x1B[48;5;%dm ' $(seq $((16*i)) $((16*i+15)))
  printf '\x1B[0m%4x ' $((i+4))
  printf '\x1B[48;5;%dm ' $(seq $((16*(i+4))) $((16*(i+4)+15)))
  printf '\x1B[0m%4x ' $((i+8))
  printf '\x1B[48;5;%dm ' $(seq $((16*(i+8))) $((16*(i+8)+15)))
  printf '\x1B[0m%4x ' $((i+12))
  printf '\x1B[48;5;%dm ' $(seq $((16*(i+12))) $((16*(i+12)+15)))
  printf '\x1B[0m\n'
done
printf '\n'

# this prints it with a bit more organization that makes it easier to look up
# by colour, but harder to look up by number
printf '%10s     \x1B[4m%s\x1B[0m\n' '' "216-colour cube (16-231)"
printf '%10s '
printf '%-8s' $(seq 16 36 220)
printf '\n'

# each row is a different G
for g in {0..5}; do
  printf '%10s ' "+$((g*6))"
  # each box is a different R
  for r in {0..5}; do
    # and then within each row of each box, B increases to the left
    base=$(( 0x10 + r*36 + g*6 ))
    printf '\x1B[48;5;%dm ' $(seq $base $((base+5)))
    printf '\x1B[0m  '
  done
  case $g in
    0)
      printf '  \x1B[4m16-colour (0-15)\x1B[0m'
      ;;
    1)
      printf ' ['
      printf '\x1B[48;5;%dm ' $(seq 0 15)
      printf '\x1B[0m]'
      ;;
    3)
      printf '  \x1B[4mgreyscale (232-255)\x1B[0m'
      ;;
    4)
      printf ' ['
      printf '\x1B[48;5;%dm ' $(seq 232 255)
      printf '\x1B[0m]'
  esac
  printf '\n'
done


# RGB888
# if we sample every 32nd colour, i.e. stride each one from 0 to 255 in steps of 32,
# we can probably fit them all on screen, and this gives a higher colour resolution
# than the 6x6x6 cube above still

printf '\n%10s \x1B[1m%-64s%s\x1B[0m\n' '' \
  "RGB-888 colour cube (sampled at RGB333 resolution)" \
  "SGR 38;2;R;G;B m"
# as above, each row is G, each box is R, and B varies across cells
printf '%10s R='
printf ' %-3d      ' $(seq 31 32 256)
printf '\n'
printf '         B='
printf ' 31-255%s   ' '' '' '' '' '' '' '' ''
printf '\n'
for g in $(seq 31 32 255); do
  if (( g==31 )); then
    printf '   G= %3d  ' $g
  else
    printf '%9d  ' $g
  fi
  for r in $(seq 31 32 255); do
    printf "\x1B[48;2;$r;$g;%dm " $(seq 31 32 255)
    printf '\x1B[0m  '
  done
  printf '%3d' $g
  printf '\n'
done
