#!/usr/bin/env zsh
#
# Fix some common issues with comic files.
# - repack cbt, cba, cbr into cbz
# - rename by removing website, scanning, and scanlation group names
# - convert greyscale+alpha PNGs to RGBA to work around a bug in Ubooquity
# - optionally normalize chapter/volume numbering based on a user-provided
# - pattern; the following works well for stuff from Mangadex:
#   -r 'Vol\.([0-9]+) Ch\.([0-9.+])' 'v%02d ch%03.1f'
#   use '%2$d' instead of '%d' to (e.g.) process the second argument

set -e

# default settings
# -n
declare DRYRUN=0
# -B
declare BACKUP=1
# -r
declare RENAME_SRC=""
declare RENAME_DST=""

function try {
  if (( DRYRUN )); then
    echo "$*"
  else
    "$@"
  fi
}

function status {
  local fmt="$1"; shift
  if [[ $fmt == -c ]]; then
    fmt='\x1B[2K\r'"$1"; shift
  # else
  #   printf '\r'
  fi
  # printf "$fmt" "$@" >&2
  printf "$fmt" "$@" >&2
}

declare -ra PATTERNS=(
  '\([12][0-9][0-9][0-9]\)'
  '\([Dd]igital[^)]*\)'
  '\(Minutemen-[A-Za-z]+\)'
  '\(Empire-[A-Za-z]+\)'
  '\(Oroboros-[A-Za-z]+\)'
  '\([A-Za-z ]+-Empire\)'
  'GetComics\.INFO'
  '\((TheGroup|F|KG Manga|Mr\. Kimiko|Digital)\)'
  '\(gb\) \[[^]]+\]'
  '\[([a-zA-Z]+ ?Scan(s|lation)|Hourou Musume|4kumalations|Musashi Quality|s\.ADTRW|MiamMiam-Team|.* \(Ex-Licenses\))\]'
)

function new-name {
  local dst="$1"
  # clean up filename by trimming scanlator group names, etc
  for pattern in ${PATTERNS[@]}; do
    dst=$(echo "$dst" | sed -E "s, *$pattern,,")
  done
  # fix extension in case it's not a cbz
  dst=${dst%.cb?}.cbz

  # no user-specified renames? then we're done.
  if [[ ! $RENAME_SRC ]]; then
    echo "$dst"
    return
  fi

  # otherwise run it through the lua-based rename engine
  echo ${dst%.cbz} | luajit -e "
    local name = io.read('*l')
    local src = '^(.-)$RENAME_SRC(.*)$'
    local dst = '%s$RENAME_DST%s.cbz'
    if not name:match(src) then
      print(name)
    else
      print(dst:format(name:match(src)))
    end
  "
}

function fix-format {
  local src=$(realpath $1)
  [[ ${src##*.} == cbz ]] && return 0
  status '\n[unpack] %s' ${src##.*}

  try mkdir -p /tmp/$$
  ( cd /tmp/$$ && dtrx --one=here -f -o -q "$src" ) || exit 1
}

function fix-png {
  local src=$(realpath $1)
  local nrof_pngs=$(dtrx -l $src | egrep -c '\.png$')
  (( nrof_pngs > 0 )) || return 0

  status '\n[fix png alpha] unpacking %d PNGs' $nrof_pngs
  if [[ ! -d /tmp/$$ ]]; then
    try mkdir -p /tmp/$$
    try unzip -qq -d /tmp/$$ $src '*.png'
    local unpacked=0
  else
    local unpacked=1
  fi

  checked=0
  fixed=0
  if (( !DRYRUN )); then
    find /tmp/$$ -name '*.png' | while read png; do
      ((++checked)); status -c '[fix png alpha] %d checked/%d fixed' $checked $fixed
      file $png | fgrep -q 'gray+alpha' || continue
      convert $png PNG32:$png
      ((++fixed))
    done
  fi

  if (( fixed )); then
    status -c '[fix png alpha] %d checked/%d fixed' $checked $fixed
  fi

  if (( !fixed && !unpacked )); then
    rm -rf /tmp/$$
  fi
}

function repack {
  local src=$(realpath $1)
  local dst=$(realpath $2)

  if [[ ! -d /tmp/$$ ]]; then
    # Rename file if needed and don't do anything else -- no need to
    # pack up modified contents or create backups.
    if [[ $src != $dst ]]; then
      status '\n[rename] %s\n     --> %s' $1 $2
      try mv -i "$src" "$dst"
    fi
    return 0
  fi

  if [[ ${src##*.} != ${dst##*.} ]]; then
    # If we're doing a format conversion, just add .backup to the original.
    if (( BACKUP )); then
      try mv $src ${src}.backup
    else
      try rm -f $src
    fi
  elif [[ $src != $dst ]]; then
    if (( BACKUP )); then
      try cp $src ${src}.backup
    fi
    try mv $src $dst
  else
    try cp $src ${src}.backup
  fi

  status '\n[repack] %s' $2
  (try cd /tmp/$$ && try zip -q -u -r -0 $dst .)
}

function help {
  cat <<EOF
Usage: fix-cbz [-dvnh] [-r pattern format] <*.cbz/*.cbr/...>
Clean up filenames, normalize pack format, and fix damaged PNG files; optionally
rename files based on user-provided pattern.
Options:
  -d,-v     enable debug tracing
  -n        dry run
  -B        do not save .backup files
  -h        this message
  -r        rename files from <pattern> to <format>; e.g.
            -r 'Volume ([0-9]+), Chapter ([0-9]+)' 'Vol.%02d Ch.%03d'
            <pattern> is a Lua string.match pattern with capture groups;
            <format> is a Lua string.format string.
EOF
}

# process argv
while [[ $1 ]]; do
  case "$1" in
    -d|-v) set -x; shift;;
    -r) RENAME_SRC="$2"; RENAME_DST="$3"; shift 3;;
    -n) DRYRUN=1; shift;;
    -B) BACKUP=0; shift;;
    -h) help; exit 0;;
    --) shift; break;;
    *) break;
  esac
done

trap "rm -rf '/tmp/$$'" EXIT
while [[ $1 ]]; do
  rm -rf /tmp/$$
  src="$1"; shift
  status -c '\n[scan] %s' $src
  dst="$(new-name $src)"
  fix-format $src $dst
  fix-png $src $dst
  repack $src $dst
  status '\n[done] %s\n' $dst
done
