#!/usr/bin/env zsh
# Fetch/update a recipe index for Cook's Country.
# needs wring, lua, tac

# Issue: title, cover image, and list of recipes.
# Recipe: title, blurb, image, "why it works"
# UI: a list of issues; click on an issue to expand and display the list of recipes with blurbs.
# search box at the top; typing in a search automatically filters to only recipes matching the search and issues containing those recipes, and automatically expands those issues.

set -e

OUTPUT=${OUTPUT=/srv/www/archives/cooks-country/}
BASEURL=${BASEURL=https://www.americastestkitchen.com}
MAGAZINE=${MAGAZINE=cooksillustrated}
PREFETCH=${PREFETCH=}

# attr html field -> returns contents of field
function attr {
  print -r "$1" | egrep -o " $2=\"[^\"]+\"" | cut -d'"' -f2 | head -n1
}

function sanitize {
  print -r "$1" | tr ' /\t' '_'
}

function html {
  >>"$OUTPUT/index.html" printf "$@"
}

function unescape {
  print -r "<div>$*</div>" | wring text - //div
}

function fetch-desc {
  local page="$(curl -s "$1")"
  if ! print -r "$page" | fgrep -q NEXT_DATA; then
    print -r "$page" > ~/tmp/page
    echo -n "!"
    fetch-desc "$1"
    return
  fi
  print -r "$page" \
  | fgrep NEXT_DATA \
  | egrep -o '\{.*}' \
  | jq -r ".props.initialState.content.documents[] | (.description,.whyThisWorks)" \
  | {
    read desc || {
      >&2 echo "Error reading description for $1"; exit 1; }
    read whythisworks
    printf "%s\t%s" "$desc" "$(echo "$whythisworks" | sed -E 's,</?p>,,g')"
  }
}

# fixtitle title url -- if the title doesn't have a year on the end, extract
# the year from the url
function fixtitle {
  if echo "$1" | egrep -q '[1-2][0-9][0-9][0-9]$'; then
    echo -n "$1"
  else
    echo -n "$1" | tr -d ' '
    echo -n " "
    echo -n "$2" | egrep -o '[1-2][0-9][0-9][0-9]/browse' | cut -d/ -f1
  fi
}

mkdir -p "$OUTPUT"

CSS=$(dirname $0)/cooks-country-index.css
JS=$(dirname $0)/cooks-country-index.js

cp $CSS $OUTPUT/style.css

echo "Fetching master index..."
if [[ $PREFETCH ]]; then
  # user has already downloaded the index, load from local file
  issues="$(cat "$PREFETCH" | wring html - .result__image-link)"
elif [[ $BASEURL ]]; then
  # default behaviour -- fetch from web
  issues="$(curl -s "${BASEURL}/${MAGAZINE}/magazines/browse" | wring html - .result__image-link)"
else
  # no baseurl -- skip fetching entirely and only regenerate the local html
  issues=""
fi
print -r "$issues" | tac | while read -r issue; do
  [[ $issue ]] || continue  # no baseurl results in one line of blank input
  title="$(attr "$issue" title)"
  url="$(attr "$issue" href)"
  title="$(fixtitle "$title" "$url")"
  if [[ $url != http* ]]; then url="${BASEURL}${url}"; fi
  img="$(attr "$issue" data-src)"
  >&2 echo "$title" "$url" "$img"
  if [[ $TITLEFILTER ]]; then
    if ! echo "$title" | eval $TITLEFILTER; then
      >&2 echo "Skipping $title"
      continue
    fi
  fi

  out="$OUTPUT/$(sanitize "$title")"
  [[ -f "$out/done" ]] && continue;

  echo -n "Fetching $title:"
  rm -f "$out/index"
  mkdir -p "$out"
  print -r "$title" > "$out/title"

  # Fetch cover if missing
  [[ -f "$out/cover.jpeg" ]] || {
    echo -n " cover"
    if [[ $img ]]; then
      curl -s "$img" > "$out/cover.jpeg"
    else
      echo -n "!"
    fi
  }

  # Fetch recipe images and write issue index file
  recipes="$(curl -s "${url}" \
    | wring html - .recipe \
    | fgrep -v result__online-extra \
    | lua -e 'print((io.read("*a"):gsub("\r",""):gsub("([^>])\n+", "%1 ")))')"
  echo -n " recipes"
  print -r "$recipes" | while read -r recipe; do
    title="$(attr "$recipe" title)"
    title="$(unescape "$title")"
    img="$(attr "$recipe" data-src)"
    url="$(attr "$recipe" href)"
    desc="$(fetch-desc "${BASEURL}${url}")"
    splash="$(sanitize "$title").jpeg"
    [[ -f "$out/$splash" ]] || {
      if [[ $img ]] then
        curl -s "$img" > "$out/$splash"
      else
        curl -s "https://cataas.com/cat?width=120&height=120" > "$out/$splash"
      fi
    }
    printf '%s\t%s\t%s\n' "$splash" "$title" "$desc" >> "$out/index"
    echo -n "."
    sleep 5
  done

  if [[ $(cat $out/index | wc -l) -lt 4 ]]; then
    # An issue with few/no recipes? Probably this is one of those cases where
    # they return multiple copies of an issue in the search, but only one of them
    # is valid.
    echo $out
    ls $out
    #rm -f "$out/index" "$out/done" "$out/cover.jpeg"
    echo "error!"
    exit 1
    continue
  fi

  touch "$out/done"
  echo ""
  #break
done

echo -n "Generating top-level HTML"
rm -rf "$OUTPUT/index.html"
html "
  <html>
    <head>
      <title>Cook's Country Index</title>
      <link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\">
      <meta charset=\"UTF-8\">
    </head>
      <script>
        $(cat $JS)
      </script>
    <body>
    <div id=loading>Loading...</div>
"

ls -t "$OUTPUT" | fgrep -v index.html | fgrep -v style.css | while read -r issue; do
  [[ -f "$issue/skip" ]] && continue
  html '
    <div class="header">
      <img src="%s" width=120px>
      <span><input type="button" value="‚ú®" onclick="toggleRowFilter('\''star-view'\'')"/></span>
      <span><input type="button" value="‚òÄÔ∏è" onclick="clearAllStars()"/></span>
      <span><input type="button" value="üóí" onclick="toggleRowFilter('\''unwritten-view'\'')"/></span>
      <span class="header-title">%s</span>
    </div>
    <table id="%s">
  ' "$issue/cover.jpeg" "$(cat "$OUTPUT/$issue/title")" "$issue"
  cat "$OUTPUT/$issue/index" | sort | while IFS=$'\t' read -r splash title desc whythisworks; do
    if [[ $desc == $whythisworks ]]; then
      whythisworks=""
    fi
    splash="${splash//\"/%22}"
    id="$issue/${splash%.*}"
    html '
      <tr id="%s" class="recipe-row">
        <td>
          <label id="cb:starred:%s" class="hotlist-button" onclick="toggleStar(this)">‚òÜ</label>
        </td>
        <td class="recipe-name" width=100%%>
          <b>%s</b><br/>
          <span class="desc">%s</span>
          <!-- <span class="whythisworks">%s</span> -->
        </td>
        <td style="text-align:right;">
          <img src="%s" height="80px" loading="lazy">
        </td>
        <td nowrap>
          <span class="cooked-checkbox">
            <input id="cb:cooked:%s" type="checkbox" onchange="toggleState(this, '\''cooked'\'');">
            <label for="cb:cooked:%s">üçΩ</label>
          </span>
          <br>
          <span class="written-checkbox">
            <input id="cb:written:%s" type="checkbox" onchange="toggleState(this, '\''written'\'');">
            <label for="cb:written:%s">üóí</label>
          </span>
          <br>
          <span class="hidden-checkbox">
            <input id="cb:hidden:%s" type="checkbox" onchange="toggleState(this, '\''hidden'\'');">
            <label for="cb:hidden:%s">‚äó</label>
          </span>
        </td>
      </tr>
    ' "$id" "$id" "$title" "$desc" "$whythisworks" "$issue/$splash" "$id" "$id" "$id" "$id" "$id" "$id"
  done
  html '</table>'
  echo -n "."
  # break
done
html "</body></html>"
echo ""
