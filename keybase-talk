#!/usr/bin/env zsh
# simple interactive chat UI for keybase chat
# usage: keybase-talk <conversation name> [channel name]
# /help once it's loaded for more documentation.

# keybase chat output format:
#     [index] [username timestamp] [expires in timestamp] reactji message
# - reactji are optional, and have the format: emoji [count]
#   or: :emoji-name: [count]
#   n.b. the space between the emoji and the count is optional!
#   similarly, there is no fixed number of spaces between the expiration counter
#   and the reactji, or the reactji and the message, beyond "at least one".
# - keybase hard-wraps messages, even if !isatty(stdout); lines after the first
#   will be prefixed with spaces to align them with the previous line.
#   these can be identified as a line starting with lots of spaces and no [index].
# - the "expires in" message is optional
# - for system messages, the message text itself is wrapped in [], e.g.
#     [3] [xxxxxxx 45s]                       [Added @yyyy to the team]

# Planned but not yet implemented features:
# /join,/part
# /upload,/download
# /msg to create a privmsg, may be eqv to /join in keybase

# event handling
# messages will have msg.channel.name set to the conversation name, which will
# be the team name for messages in a team channel or "foo,bar" for PMs (where
# foo and bar are the participants).
# for team channels, msg.channel.topic_name will be set to the channel name
# jq -r '.result.messages | map([.msg.content.type,.msg.channel.name,.msg.channel.topic_name] | join("\t")) | .[]'
# jq -r '[.msg.content.type,.msg.channel.name,.msg.channel.topic_name] | join("\t")'
# known message types: attachment delete edit none reaction system text unfurl
# all of these will have type and name set, and topic_name if they're part of a team chat
# in practice we can just do something like:
# get target
#  if focused:
#   on text, unfurl, attach, delete, edit, none, or reaction, refresh text
#   on system, refresh text and user list
#  if not focused:
#   on text, unfurl, attach, or edit, mark as major activity
#   on delete, none, reaction, or system, mark as minor activity

# keybase chat is annoyingly inconsistent:
#  keybase chat read <conv> [--channel=foo]
#  keybase chat send <conv> [--channel=foo]
#  keybase chat list-members <conv> <channel>
# note that the former accepts both #foo and foo, and the latter only accepts foo

unsetopt function_argzero
setopt prompt_subst prompt_percent
function err { >&2 echo "$@"; }

export PIPEDIR=/run/user/$UID/keybase-talk.$$

#### Safety checks ####

missing=""
for prog in tmux od sed lua fold clear jq keybase; do
  if ! &>/dev/null type $prog; then
    missing="$missing $prog"
  fi
done
if [[ $missing ]]; then
  err "This script requires the following tools, but can't find them:$missing"
  exit 1
fi

if [[ ! $TMUX ]]; then
  err "This program must be run inside tmux."
  exit 2
fi

#### Entry point for top-level program ####
# n.b. entry points for the name list and chat window are further down, look
# for "function main/".

function main {
  # One more safety. We run this inside main because it doesn't apply to the
  # other entry points -- they expect to run after main has already created the
  # extra tmux panes.
  if (( $(tmux list-panes | wc -l) > 1 )); then
    err "I found more than one open tmux pane."
    err "This means either you have multiple panes open and I was about to ruin them, or that my pane-opening logic has a bug and I was about to crash your tmux server by creating infinitely many panes."
    exit 3
  fi

  # Strip leading hash from $2, if present.
  if [[ $2 ]]; then
    set -- $1 ${2#\#}
  fi

  setup-pipes
  setup-gui "$@"
  setup-input "$@"
  setup-events

  # We have to do this after setup-gui, because opening the pipes will block
  # until the other end has opened them as well.
  exec 9>$PIPEDIR/chat 8>$PIPEDIR/status
  export CHATFD=9 STATUSFD=8
  export NET=$1 CHAN=$2
  redraw-both

  while input=""; vared -h -p '$(left-prompt)' input; do
    if [[ $input == /* ]]; then
      # handle /command
      printf '%s' "$input" | read command args
      if [[ $(printf '%s\n' ${(k)functions[@]} | egrep "^$command" | wc -l) == 1 ]]; then
        # TODO: capture stderr output of command and show it to the user
        $(printf '%s\n' ${(k)functions[@]} | egrep "^$command") ${(z)args}
      else
        err "Unknown or ambiguous command: $command"
        read -q '?--more--'
      fi
    else
      /say "$*"
    fi
  done

  err "Main loop exited unexpectedly!"
  shutdown
}

function shutdown {
  clear
  trap '' WINCH  # or the resize handler will run when we kill-pane, and crash
  tmux kill-pane -a -t $TMUX_PANE
  zpty -d event-listener
  rm -rf $PIPEDIR
}

#### IPC ####

function setup-pipes {
  mkdir -p $PIPEDIR
  mkfifo -m 0600 $PIPEDIR/chat
  mkfifo -m 0600 $PIPEDIR/status
}

function send {
  local fd=$1; shift
  print -r -u $fd -- "$@"
}

#### Event handlers ####

zmodload zsh/zpty

function setup-events {
  zpty event-listener event-listener
  zle -F $REPLY event-handler
}

function event-listener {
  stty -onlcr
  keybase chat api-listen --exploding 2>/dev/null \
  | jq --unbuffered -r '[.msg.content.type,.msg.channel.name,.msg.channel.topic_name] | join("\t")'
}

# called by zle -F with the active FD as the only argument.
function event-handler {
  read -u $1 -r type net chan
  # Redraw status pane on any activity.
  redraw-status
  if [[ $net == $NET && $chan == $CHAN ]]; then
    # Activity in focused channel? Redraw chat pane.
    redraw-chat
  fi
}

function redraw-both { redraw-chat; redraw-status; }

function redraw-status {
  send $STATUSFD $NET $CHAN
}

function redraw-chat {
    send $CHATFD ${CHAN/?*/--channel=$CHAN} $NET
}

#### UI management code ####

# Create the chat and, if needed, user list windows. Also sets up the WINCH handler.
function setup-gui {
  # Set up the windows.
  # The watcher goes in the top pane.
  # We create it above us (-b) and don't give it focus (-d)
  tmux split-window -l $((LINES-4)) -d -b \
    "MAIN=main/chat $0 $PIPEDIR/chat; echo 'chat watcher exited unexpectedly'; read -q '?--more--'"
  # Then we create the status window to the right of it.
  tmux split-window -l 20 -d -h -t 0 \
    "MAIN=main/status $0 $PIPEDIR/status; echo 'name list exited unexpectedly'; read -q '?--more--'"
  # The input reader goes in the bottom (currently focused) pane.

  # Automatically resize page when size changes.
  trap /resize WINCH
}

# Configures ZLE for chat input.
function setup-input {
  # Initialize a new in-memory history, which will be used for the input box.
  # FIXME: used to be working, isn't working anymore?
  fc -p -a /dev/null

  # Bind pageup/down to scroll through history.
  [[ -f ~/.zkbd/$TERM-$VENDOR-$OSTYPE ]] && source ~/.zkbd/$TERM-$VENDOR-$OSTYPE
  zle -N scroll-up
  bindkey "${key[PageUp]:=^[[5~}" scroll-up
  zle -N scroll-down
  bindkey "${key[PageDown]:=^[[6~}" scroll-down
  zle -N exit-scroll
  bindkey "^[" exit-scroll

  # These aren't bound by default, and we can't inherit the bindkey settings from
  # our parent shell (which may not even be zsh), so make an attempt here.
  bindkey "${key[Home]:=^[[1~}" beginning-of-line
  bindkey "${key[End]:=^[[1~}" end-of-line
}

# Draw the red status bar, left-hand status, and > prompt.
# LPROMPT is set externally and contains the channel name and user count.
CLEAR_ON_PROMPT=1
function left-prompt {
  if (( CLEAR_ON_PROMPT )); then
    printf '%b' '%{\x1Bc\x1B[0;0H%}%B>%b '
  else
    printf '%b' '%B>%b '
  fi
}

function zoom-in {
  trap '' WINCH
  tmux resize-pane -Z
}

function zoom-out {
  tmux resize-pane -Z
  trap /resize WINCH
}

function scroll-up {
  tmux copy-mode -t 0 -e
  tmux send -t 0 PgUp
}

function scroll-down {
  # Send only in copy mode, otherwise we get garbage
  if [[ $(tmux display-message -t 0 -p -F '#{pane_in_mode}') == 1 ]]; then
    tmux send -t 0 PgDn
  fi
}

function exit-scroll {
  # Send only in copy mode, otherwise we get garbage
  if [[ $(tmux display-message -t 0 -p -F '#{pane_in_mode}') == 1 ]]; then
    tmux send -t 0 Escape
  fi
}

#### Implementation of /commands ####

function parse-conv {
  echo "$1" | sed -E 's,#, ,'
}

function parse-conv-optional {
  if [[ $1 ]]; then
    parse-conv $1
  else
    printf '%s\t%s' $NET $CHAN
  fi
}

function /buffer {
  [[ $1 ]] || return
  local net chan
  parse-conv "$1" | read net chan
  NET=$net
  CHAN=$chan
  redraw-both
}

# Run some debug code. Useful for e.g. directly calling event handlers.
function /debug {
  eval "${1#/debug }"
}

function /join {
  [[ $1 ]] || return
  local net chan
  parse-conv "$1" | read net chan
  if [[ $chan ]]; then
    keybase chat join-channel $net $chan
  else
    keybase team request-access $net
  fi
  redraw-both
}

function /list {
  zoom-in
  if [[ $1 ]]; then
    keybase chat list-channels "$1" | less
  else
    keybase chat list | less
  fi
  zoom-out
}

function /log {
  zoom-in
  local duration=${1:-1d}
  local net chan
  parse-conv-optional "$2" | read net chan
  keybase chat read \
    --since $duration --at-most 0 --at-least 10240 \
    ${chan/?*/--channel=$chan} "$net" \
    | pretty-chat | less -R +G
  zoom-out
}

function /names {
  zoom-in
  parse-conv-optional "$1" | read net chan
  if [[ ! $chan ]]; then
    err "/names only works on team channels"
    read -q
  else
    keybase chat list-members $net $chan | less
  fi
  zoom-out
}

function /part {
  [[ $1 ]] || return
  local net chan
  parse-conv "$1" | read net chan
  if [[ $chan ]]; then
    keybase chat leave-channel $net $chan
  else
    keybase team leave $net
  fi
  redraw-both
}

function /quit {
  shutdown
  exit 0
}

function /resize {
  trap '' WINCH
  tmux resize-pane -y 3
  if (( $(tmux list-panes | wc -l) > 2 )); then
    tmux resize-pane -t 1 -x 20
  fi
  redraw-both
  trap /resize WINCH
}

function /restart {
  shutdown
  if [[ $1 ]]; then
    exec $0 $@
  else
    exec $0 $NET $CHAN
  fi
}

function /say {
  keybase chat send \
    --exploding-lifetime=168h0m0s \
    ${CHAN/#%?*/--channel=$CHAN} $NET "$*"
}

function /shell {
  zoom-in
  $SHELL -i
  zoom-out
}

function /help {
  zoom-in
  (cat | less) <<EOF
  Type a message and press enter to send it. Use pageup/down to scroll the chat history.

  You can also enter the following commands. Any command that asks for a <conversation>
  as an argument is expecting either a private conversation name (e.g. "me,them") or
  a team#channel pair, e.g. "keybasefriends#general".

  You can shorten commands as long as the shortened version is unambiguous, e.g. /b
  instead of /buffer.

    /buffer <conversation>
                Switch to a different conversation.

    /debug <zsh code>
                Execute code in the context of the keybase-talk input pane.
                You probably want to /debug CLEAR_ON_PROMPT=0 and
                /debug trap '' WINCH before anything else.

    /help       This screen. Use pageup/down to scroll, q to return to chat.

    /join <team>
    /join <conversation>
                Join a team, or a channel within a team.

    /list
    /list <team>
                List all conversations you are in; or list all channels in a team.

    /log
    /log <duration>
    /log <duration> <conversation>
                Show the last day of messages, or the last <duration> (e.g. 7d),
                for the current conversation or the specified <conversation>.
                Pageup/down to scroll, / or ? to search, q to return to chat.

    /names      List all members of the current channel.

    /part <team>
    /part <conversation>
                Leave a team channel, or leave the entire team.

    /quit       Exit keybase-talk.

    /resize     Resize the UI to fit the window and redraw the backscroll and user
                list. This should happen automatically as needed, but if it doesn't,
                use this command.

    /restart <args>
                Restart keybase-talk with the given arguments; with no arguments,
                uses whatever arguments it was originally invoked with.

    /shell      Open a full-screen \$SHELL. Returns to chat when the shell exits.
EOF
  zoom-out
}

#### Status pane ####

function main/status {
  exec 9<$1
  local net chan
  while read -r -u 9 net chan; do
    local screen=$(draw-status)
    printf '%s' "$screen"
  done
}

function draw-status {
  printf '\x1Bc\x1B[0;0H'
  if [[ $chan ]]; then
    print -P '%F{black}%K{cyan}      CHANNEL%E%f%k%B'
    print ''
    print -P "  %U$net%u"
    print "    #$chan"
    print "    ($(keybase chat list-members $net $chan | wc -l) members)"
  else
    print -P '%F{black}%K{cyan}      PRIVATE%E%f%k%B'
    print ''
    printf '  %s\n' $(echo $net | sed -E 's/,/ /g')
  fi
  print -P '%f%k%b'
  pretty-activity-tree
}

function pretty-activity-tree {
  local current_net=""
  local activity=$(
    echo '{"method": "list"}' \
    | keybase chat api \
    | jq -r '.result.conversations | map([.unread, .channel.name, .channel.topic_name]) | map(join("\t")) | .[]'
  )

  print -P '%B%F{white}%K{blue}      CHANNELS%E%b%f%k'
  print ''
  echo "$activity" | egrep -v $'\t$' | sort -k2 | while read unread net chan; do
    if [[ $unread != true ]]; then
      unread=''
    fi
    if [[ $net == $current_net ]]; then
      print -P "    ${unread/?*/%B}#$chan%b"
    else
      current_net=$net
      print -P "  %U$net%u"
      print -P "    ${unread/?*/%B}#$chan%b"
    fi
  done
  print ''
  print -P '%B%F{white}%K{blue}  PRIVATE MESSAGES%E%b%f%k'
  print ''
  echo "$activity" | egrep $'^true\t.*\t$' | sort -k2 | while read unread pm; do
    # no printing of fully read PMs
    print -P "    %B$chan%b"
  done
}

function formatnick {
  printf '\x1B[%dm%s\x1B[0m' $(hashnick $1) $1
}

function hashnick {
  echo "$1" | od -td1 -An -w1024 -v | sed -E 's,^ +,print((,; s, *$,)%6+31),; s, +,+,g;' | lua
}

#### Chat window ####

function main/chat {
  local old_args=""
  exec 9<$1
  while read -r -u 9 -A args; do
    if [[ $old_args != ${args[*]} ]]; then
      printf '\x1Bc\x1B[0;0HLoading chat history, please wait...\n'
      old_args="${args[*]}"
    fi
    render-chat "${args[@]}"
  done
}

function render-chat {
  local screen="$(
    keybase chat read \
      --at-least=$((LINES*4)) --at-most=$((LINES*4)) "$@" \
      | pretty-chat
    flush
  )"
  printf '\x1Bc\x1B[0;0H\x07%s' "$screen"
}

function pretty-chat {
  nick=""; message=""; reactji="";
  while read -r line; do parse-line "$line"; done
}

function parse-line {
  if [[ $1 == '['* ]]; then
    flush
    nick=$(echo "$1" | cut -d'[' -f3 | cut -d' ' -f1)
    message=$(echo "$1" | sed -E 's,\[expires in [^]]+\],,' | cut -d']' -f3- | trim)
    # the second space here is \xA0, nonbreaking space, so that `fold` later on doesn't
    # split it up.
    reactji=$(echo "$message" | egrep -o '^([^ ]+ ?\[[0-9]+\] )+' | sed -E 's, , ,g')
    if [[ $reactji ]]; then
      message=$(echo "$message" | egrep -o '  .*' | trim)
    fi
  else
    message="$message $(echo "$1" | trim)"
  fi
}

# Trim leading whitespace. Leaves trailing whitespace alone -- we need it for
# line pasting.
function trim {
  sed -E 's,^ +,,; s, +$,,'
}

function flush {
  if [[ $message == *'chat read error'* ]]; then
    # Skip errors, usually this means the message has expired or predates us joining the channel.
  else
    nick="<$(formatnick $nick)>"
    if [[ $reactji ]]; then
      message="$(printf '%s \x1B[48;2;60;60;60m%s\x1B[0m' $message $reactji)"
    fi
    printf '%s\n' "$message" | fold -s -w $((COLUMNS-22)) | while read -r line; do
      # Field width for the name is calculated as [20 + 9 nonprinting control code characters]
      # for a display width of 20.
      printf '%29s %s\n' "$nick" "$line"
      nick=$(printf '\x1B[000000m') # nine characters of nonprinting padding
    done
  fi
  nick=""
  message=""
  reactji=""
}


#### And awaaaaaay we go! ####

# Under normal circumstances this will be unset and thus main() will be called.
# When the program is re-invoking itself to run as the chat window or name window,
# this will be set to one of the other entry points.
${MAIN:=main} "$@"
