#!/usr/bin/env python3
# Usage: oscwrap command args
# Run `command args` but filter the output through a watcher that looks for
# custom OSC sequences and does things with them.
# Hooks OSC 451 ; Pt ; Pt BEL which as far as I know isn't used by anything else.
# TODO: support for OSC 666 ; Ps ; Pt BEL which is used by doomrl-server.

import os
import subprocess
import sys

def openURL(url):
  subprocess.call(['notify-send', 'Opening ' + url + ' as URL...'])
  subprocess.call(["google-chrome", url],
    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def openIMG(url):
  subprocess.call(['notify-send', 'Opening ' + url + ' as image...'])
  subprocess.call(['feh', '-x', '-F', '--auto-zoom', url],
    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

oscs = {
  'URL': openURL,
  'IMG': openIMG,
}

def dispatch(osc):
  if not osc.startswith(b'451;'):
    return
  [_,subcommand,arg] = map(lambda b: b.decode('UTF8'), osc.split(b';',2))
  # print(subcommand,arg)
  if subcommand in oscs:
    oscs[subcommand](arg)
  else:
    print("Unrecognized sequence:", osc)

def main(argv):
  (rpipe,wpipe) = os.pipe()
  child = subprocess.Popen(sys.argv[1:], stdout=wpipe)
  os.close(wpipe)
  while True:
    data = os.read(rpipe, 8192)
    if not data:
      break
    start = data.find(b'\x1B]')
    if start >= 0:
      end = data.find(0x07, start)
      osc = data[start+2:end]
      dispatch(osc)
    os.write(1, data)
  os.close(rpipe)
  return 0


if __name__ == '__main__':
  import sys
  sys.exit(main(sys.argv))
