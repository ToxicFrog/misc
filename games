#!/usr/bin/env zsh

# Wrapper around `task` to use it as a game backlog management script.
# Like Backloggery but for the terminal, pretty much.
#
# We map completion status, genre, and platform to tags?
# We can filter by tags or by project, but can only get progress bars per-project
# So, matching current BL behaviour, we probably want to use project as an alias
# for platform
# So: project == platform, use tags for status
# (unplayed/unfinished/finished/completed/null) and for anything else we want
# (genre?)
# Description is title
# Oh, tags can also be series, e.g. +series:thief

set -e
source $(dirname $(realpath $0))/tasklib.sh

export TASKRC=$HOME/.backlogrc

function main {
  task/init-config games.defaults
  task/dispatch "$@"
}

task/register start 'start$' games/start <<EOF

  $NAME <filter> start

Mark a game as currently being played and set its status to "unfinished".
EOF
function games/start { shift -p; \task "$@" unfinished; }

task/register done 'done$' games/done </dev/null
function games/done { echo "Use \`$NAME <filter> (finished|completed|mastered|null)\` instead."; }

task/register grep '^grep' games/grep <<EOF

  $NAME grep <pattern> [report]

Display games where the title matches the given pattern (as a case-insensitive
regex) using the specified report. If no report is specified, uses "all".
EOF
function games/grep {
  shift
  \task rc.verbose:label,blank rc.regex:yes rc.search.case.sensitive:no \
    "( description ~ '$1' )" "${2:=all}"
}

function task/map-arg {
  echo "${1/platform:/project:}"
}

exec main "$@"

  # elif [[ $1 == pl*:* ]]; then
  #   new_args+="project:${1#pl*:}"
  # else
  #   new_args+="$1"
