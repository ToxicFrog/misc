#!/usr/bin/env zsh
#
# Simple Linux launcher for eXoDOS games
#
# Quick start:
# - put in the same directory you downloaded eXoDOS to (alongside Setup.bat)
# - run with --help for more details, or no arguments to get started
#
# Note that this is much more basic than the official Linux patch for eXoDOS,
# which you can download here: https://www.retro-exo.com/linux.html
# This script has fewer dependencies, but also fewer features, and intentionally
# does not attempt to support the full breadth of games included in eXoDOS.

set -e
#shopt -s lastpipe

# Usage: exodos-ll xml/MS-DOS.xml (or some other gamelist xml like DOSFAMILY)
function main {
  set -e
  parse-argv "$@"

  require dialog dosbox dos2unix sed egrep fgrep unzip || exit 1
  suggest dosbox-staging dosbox-ece dosbox-svn

  cd "$(dirname "$0")"
  init-dialogrc
  export DIALOGRC="$PWD/cache/dialogrc"

  if [[ ! -d 'eXo/eXoDOS/!dos' ]] || ((DO_SETUP)); then
    case $(dialog-ask --menu "It looks like eXoDOS hasn't been unpacked yet. You have a choice of unpacking just the files needed for exodos-ll, which is faster and takes up less disk space, or all the files, which will make it usable on windows as well. Use 'all the files' if this install is on a network mount or portable drive used by both Windows and Linux systems." \
      0 0 2 \
      ALL "Unpack all the files for Windows+Linux support" \
      LIN "Only unpack the files needed to run on Linux") in
      ALL) setup-exodos ;;
      LIN) setup-exodos-linuxonly ;;
      *)
        >&2 echo "eXoDOS not installed, exiting."
        exit 0
        ;;
    esac
  fi
  if ((DO_CONFIG)); then
    setup-exodos-defaults
  fi

  >&2 echo "Loading game data from $DO_XML..."
  # TODO: emit a warning if dosbox-ece or dosbox-svn are missing
  # TODO: support other options like --game <gameid> to instantly launch a game
  local cachedir="cache/$(basename "$DO_XML")"
  xml-to-cachedir "$cachedir" "$DO_XML"

  if [[ $DO_GAME ]]; then
    run-game "$cachedir/$gameid"
    exit $?
  fi

  while true; do
    gameid="$(select-game $cachedir)"
    [[ $gameid ]] || break
    run-game "$cachedir/$gameid"
  done
}

DO_SETUP=0
DO_CONFIG=0
DO_XML="xml/MS-DOS.xml"
DO_GAME=""
function parse-argv {
  while [[ $1 ]]; do
    case "$1" in
      --help) help; exit 0;;
      --setup) DO_SETUP=1; DO_CONFIG=1; shift;;
      --config) DO_CONFIG=1; shift;;
      --xml) DO_XML="${2:?--xml requires an argument}"; shift 2;;
      --game) DO_GAME="${2:?--game requires an argument}"; shift 2;;
      *) help; exit 1;;
    esac
  done
}

function help {
  cat <<EOF
Usage: exodos-ll [--setup|--config] [--xml MS-DOS.xml] [--game lemmings]

Simple curses-based launcher for eXoDOS on linux. Put it in the eXoDOS install
directory and run it.

Some caveats:
- alternate launchers are not supported
- alternate dosbox versions have very limited support
- download-on-demand is not supported; you need to have the zip files already

Flags:
      --setup  Perform initial setup by unpacking eXoDOS zip files, similar to
               Setup.bat on windows. It should do this automatically if needed,
               but you can use this flag to force it to do it again.
     --config  Configure default settings for games, like fullscreen and scaler.
               Automatically happens after --setup, but you can use this flag to
               do it again without re-installing all of eXoDOS.
    --xml XML  Load this list of games. Optional; if you don't specify this it
               will try to load xml/MS-DOS.xml automatically. The first time it
               loads a given XML file it needs to build a gamedata cache, which
               can take several minutes.
  --game GAME  Skip displaying the menu and just run this game, then exit. The
               game needs to be a game ID like "alienleg", not a full game name
               like "Alient Legacy". Note that it still needs an XML file to get
               the game info from!
       --help  This text.
EOF
}

function require {
  local failed=""
  while [[ $1 ]]; do
    if ! whence $1 >/dev/null; then
      failed="$failed $1"
    fi
    shift
  done
  if [[ $failed ]]; then
    >&2 echo "You are missing the following required commands:$failed"
    >&2 echo "The script won't work without them. Please install them and try again."
    return 1
  fi
  return 0
}

function suggest {
  local failed=""
  while [[ $1 ]]; do
    if ! whence $1 >/dev/null; then
      failed="$failed $1"
    fi
    shift
  done
  if [[ $failed ]]; then
    >&2 echo "You are missing the following dosbox variants:$failed"
    >&2 echo "The script will work without them, but you are likely to run into more malfunctioning games than you would otherwise."
    sleep 5
  fi
}

function init-dialogrc {
  mkdir -p cache
  >cache/dialogrc cat <<EOF
use_shadow = OFF
use_colors = ON
screen_color = (BLACK,BLACK,ON)
shadow_color = (BLACK,BLACK,ON)
dialog_color = (GREEN,BLACK,OFF)
title_color = (GREEN,BLACK,ON)
position_indicator_color = title_color
border_color = (GREEN,BLACK,ON)
button_active_color = (BLACK,CYAN,OFF)
button_inactive_color = (CYAN,BLACK,ON)
button_key_active_color = button_active_color
button_key_inactive_color = (CYAN,BLACK,ON)
button_label_active_color = (BLACK,CYAN,OFF)
button_label_inactive_color = (BLUE,BLACK,OFF)
# mb background
menubox_color = (GREEN,BLACK,OFF)
# mb lower border
menubox_border_color = (GREEN,BLACK,OFF)
item_color = (GREEN,BLACK,ON)
tag_color = (BLUE,BLACK,OFF)
tag_selected_color = (BLACK,BLUE,OFF)
tag_key_color = (CYAN,BLACK,ON)
tag_key_selected_color = (BLACK,CYAN,ON)
uarrow_color = (GREEN,WHITE,ON)
gauge_color = (GREEN,BLACK,ON)
border2_color = (GREEN,BLACK,ON)
menubox_border2_color = border2_color
EOF
}

# This replicates the behaviour of setup.bat and should be run from the same directory
# The goal is to produce an eXoDOS setup that works in both linux and windows
function setup-exodos {
  unzip -o Content/LaunchBox.zip | progressbox "eXoDOS setup: unpacking LaunchBox..."
  unzip -o Content/XODOSMetadata.zip | progressbox "eXoDOS setup: unpacking LaunchBox configuration..."
  unzip -o Content/Magazines.zip -d eXo/ | progressbox "eXoDOS setup: unpacking magazines..."
  unzip -o Content/'!DOSmetadata.zip' | progressbox "eXoDOS setup: unpacking game configurations..."
  (
    cd eXo
    rm -rf DataCache.txt dosbox scummvm Update
    unzip -o -d util/ util/util.zip
    for zip in mt32 SHADERS scummvm dosbox Update; do
      unzip -o util/${zip}.zip
    done
    [[ -f util/aria.zip ]] && unzip -o -d util/ util/aria.zip
    unzip -o -d util/ util/GBC.zip
  ) | progressbox "eXoDOS setup: unpacking support programs and extras..."

  if dialog-ask --yesno "Include 'adult' (erotic or pornographic) games in the index? Note: this does not filter out violent games." 0 0; then
    cp xml/MS-DOS.xml Data/Platforms/MS-DOS.xml
  else
    cp xml/DOSFAMILY.xml Data/Platforms/MS-DOS.xml
  fi
  cp xml/Playlists/* Data/Playlists/
  find . \( -iname '*.exe' -or -iname '*.dll' -or -iname '*.bat' \) \
    \( -print -and -exec chmod a+x '{}' '+' \) \
  | progressbox "Fixing permissions..."

  setup-exodos-defaults
}

function setup-exodos-linuxonly {
  unzip -o Content/XODOSMetadata.zip 'xml/*' 'Manuals/*' | progressbox 'eXoDOS setup: unpacking game info...'
  unzip -o Content/'!DOSmetadata.zip' | progressbox "eXoDOS setup: unpacking game configurations..."
  setup-exodos-defaults
}

function setup-exodos-defaults {
  local sed=''
  case $(dialog-ask --menu "What do you want your default video mode to be?" 0 -1 3 \
    FULL "Fullscreen" BIG "Windowed (1280x960)" SMALL "Windowed (640x480)") in
    FULL) sed+="s,fullscreen=false,fullscreen=true,;" ;;
    BIG) set+="s,fullscreen=true,fullscreen=false;s,windowresolution=.*,windowresolution=1280x960,;" ;;
    SMALL) set+="s,fullscreen=true,fullscreen=false;s,windowresolution=.*,windowresolution=640x480,;" ;;
    *) exit 1 ;;
  esac
  if dialog-ask --yesno "Enable aspect correction?" 0 0; then
    sed+="s,aspect=false,aspect=true,;s,output=surface,output=overlay,;"
  else
    sed+="s,aspect=true,aspect=false,;s,output=overlay,output=surface,;"
  fi
  find 'eXo/eXoDOS/!dos' -name '*.conf' \( -print -and -exec sed -E -i -s "$sed" '{}' '+' \) \
  | progressbox "Applying default settings, please wait..."
}

# xml-to-cachedir cachedir xml
function xml-to-cachedir {
  if [[ -f $1/.menudef ]]; then
    # Directory already exists
    echo "Gamedata cache for $2 already exists, loading cached info."
    return 0
  fi
  echo "Gamedata cache for $2 doesn't exist, creating it..."
  if [[ ! -f $2 ]]; then
    >&2 echo "Error: couldn't find XML gamelist file $2, giving up."
    exit 1
  fi
  rm -rf $1
  mkdir -p $1
  cat "$2" \
  | dos2unix \
  | xml-stream ApplicationPath ManualPath RootFolder Title ReleaseDate /Game \
  | to-cachedir "$1" "$(fgrep '<Game>' $2 | wc -l)"
}

# xml-stream keys
# returns a line-oriented stream of xml data of the given keys
# fragile!
function xml-stream {
  sed -E '
    /.*<[a-zA-Z0-9]+ \/>$/ d
    s,.*<([a-zA-Z0-9]+)>(.*)</.*>$,\1 \2,
    s,.*<(/?[a-zA-Z0-9]+)>$,\1,
    s,\\,/,g
  ' | egrep "^($(echo "$*" | tr ' ' '|'))"
}

# to-cachedir dir nrof_entries
# reads an xml-stream and writes a cachedir entry for each /Game
function to-cachedir {
  local cachedir="$1"
  local nrof_entries="$2"
  local n=0
  local info=()
  while read key val; do
    if [[ $key == RootFolder ]]; then
      GameId="$(basename "$val")"
    fi
    if [[ $key == /Game ]]; then
      if [[ $GameId ]]; then
        printf '%s\n' "${info[@]}" > "$cachedir/$GameId"
        printf 'XXX\n%d\nImporting game data: %s\n' "$((++n * 100 / nrof_entries))" "$GameId"
        # echo "$((++n * 100 / nrof_entries))" # update gauge
      else
        >&2 echo "WARNING: /Game with no RootFolder!"
      fi
      info=""
      GameId=""
    else
      info+=("$(printf "%s=%q" $key $val)")
    fi
  done | dialog --keep-tite --gauge "Importing game data..." 0 $((COLUMNS-4)) 0
  build-menudef "$cachedir"
}

function build-menudef {
  ( # subshell
  cd "$1"
  rm -f .menudef
  local nrof_entries="$(ls | wc -l)"
  for info in *; do
    source $info
    FullTitle="$Title (${ReleaseDate%%-*})"
    printf "%s=%q\n" FullTitle $FullTitle >> $info
    # We can't use %q here because dialog(1) requires all arguments with whitespace
    # to be enclosed in double quotes.
    printf '%s "%s"\n' $info $FullTitle >> .menudef
    printf 'XXX\n%d\nBuilding menu definitions: %s\n' "$((++n * 100 / nrof_entries))" "$FullTitle"
  done | dialog --keep-tite --gauge "Building menu definitions..." 0 $((COLUMNS-4)) 0
  sort -k2 .menudef -o .menudef # sort by title rather than gameid
  )
}

function dialog-ask {
  dialog --keep-tite "$@" 2>/tmp/$$ >/dev/tty
  cat /tmp/$$
}

function select-game {
  dialog-ask --menu "Select a Game" -1 0 -1 --file $1/.menudef
}

# run-game info-file
# Notes on game execution.
# The DOSBOX config files and whatnot expect that you are cd'd into $EXO/eXo when
# starting the game.
# install.bat in each directory is identical, and handles downloading the zip (if needed)
# and unpacking it to $EXO/eXo/eXoDOS/ -- the zip will create the necessary subdir.
# install.bat also handles configuring some game settings by editing *.conf in the !dos dir:
# - aspect=true/false (also forces output=overlay if true)
# - fullscreen=true/false
# - scaler=FOO, any of none normal3x hq2x hq3x 2xsai super2xsai advmame2x advmame3x tv2x normal2x
# The startup bat is not identical, but has only minor variations across games;
# the basic idea is:
# - cd $EXO/eXo
# - run install.bat if the game hasn't been unpacked
# - run dosbox -conf $EXO/eXo/eXoDOS/!dos/$GAMEDIR/dosbox.conf -noconsole -exit
#   (may run dosbox-SVN, dosbox-ECE, etc depending on game)
# - delete stderr.txt, stdout.txt, glide*.*, and eXoDOS/CWSDPMI.SWP
# - a few do special weird things, e.g. A.D. Cop queries the network settings and
#   writes that information to $GAMEINSTALLDIR/ExtIP2.txt
# - a few have special launch options, e.g. After Burner prompts if you want IBM or
#   TANDY mode and picks a different config file depending
function run-game {
  # TODO replace this with an interstitial menu that allows configuration options,
  # viewing the manual, etc
  source $1
  local GameId="$(basename "$RootFolder")"
  if [[ ! -d eXo/eXoDOS/$GameId ]]; then
    local ZipName="$(basename "${ApplicationPath%.bat}").zip"
    if [[ -f eXo/eXoDOS/$ZipName ]]; then
      unzip -d eXo/eXoDOS eXo/eXoDOS/$ZipName | progressbox "Installing $Title from $ZipName..."
    else
      dialog --keep-tite --msgbox "$Title is not installed, and I couldn't find the zip file ($ZipName) to install it from." 0 0
      return 1
    fi
  fi
  # if CHOICE.EXE is present, it overrides the dosbox builtin and breaks everything
  # since it's not actually a DOS program! so we move it out of the way until we're done
  [[ -f eXo/eXoDOS/$GameId/CHOICE.EXE ]] && mv eXo/eXoDOS/$GameId/CHOICE.{EXE,WIN32}
  (cd eXo && dosbox -exit -conf ../$RootFolder/dosbox.conf)
  [[ -f eXo/eXoDOS/$GameId/CHOICE.WIN32 ]] && mv eXo/eXoDOS/$GameId/CHOICE.{WIN32,EXE}
}

function progressbox {
  dialog --keep-tite --progressbox "$1" -1 -1
}

main "$@"
