#!/usr/bin/env zsh
#
# share -- ipfs-based file sharing
#
# Can share individual files, directories, or ad hoc collections of files and/or
# directories (which will be automatically wrapped in a directory).
#
# See `share help` for usage information.

# Future work: support sharing by IPNS. (This is why share state is maintained
# in the IPFS keystore). Currently it's disabled because private IPFS swarms
# don't support IPNS.

set -e
setopt no_function_argzero

# Override these settings in ~/.config/ipfs-share if desired.

export IPFS_PATH
# export IPFS_PATH=/path/to/ipfs/dir

# If running a public node, replacing this with the URL of a gateway closer
# to your node is recommended for performance reasons.
# If running a private node you MUST replace this with the URL of a gateway
# connected to your private swarm.
export IPFS_GATEWAY=https://gateway.ipfs.io
# export IPFS_GATEWAY=https://$(hostname -f)

# Not currently supported.
#export ENABLE_IPNS=0

if [[ -f ~/.config/ipfs-share ]]; then
  source ~/.config/ipfs-share
fi

function share/main {
  local cmd="$1"; shift
  if (( ${+functions[share/cmd-$cmd]} )); then
    share/cmd-$cmd "$@"
  else
    share/die "Unknown command '$cmd'. Try '$0 help'."
  fi
}

## share help [command]
# List available commands, or display help for a specific command.
function share/cmd-help {
  printf '%s\n'\
    "$0 -- a simple file sharing interface on top of ipfs."\
    "Usage:"\
    "  $0 add <dir>"\
    "    Share a directory and everything in it."\
    "  $0 add <list of files/dirs>"\
    "    Create a shared directory containing the listed files/dirs."\
    "  $0 add-zip <name> <list of files/dirs>"\
    "    Like add, but creates a zip file with the given name and shares that instead."\
    "  $0 ls [pattern]"\
    "    List all shares. With <pattern>, list only matching shares and their contents."\
    "  $0 rm [pattern]"\
    "    Remove all shares matching <pattern>."\
    "  $0 gc"\
    "    Delete from IPFS data associated with shares that have been removed."
    # "  $0 refresh [pattern]"\
    # "    Refresh expired shares so they become accessible again."\
}

function share/die {
  >&2 printf '%s\n' "$@"
  exit 1
}

## share add <file>
## share add <directory>
## share add <multiple files and/or directories...>
# Add a share.
# If a single directory is specified, shares that directory as is.
# If a single file or multiple arguments are specified, wraps them in a directory
# (using -w) and shares that.
# N.b. it is not pinned, because the MFS root is considered a GC root as well,
# so as long as it's referenced by /.shares it won't be garbage collected.
function share/cmd-add {
  local name=$(share/paths-to-name "$@")
  printf 'Name: %s\n' $name
  local hash
  if [[ $# == 1 && -d "$1" ]]; then
    hash=$(ipfs add --pin=false -r -Q --progress "$1")
    printf 'IPFS: %s/ipfs/%s\n' $IPFS_GATEWAY $hash
  else
    hash=$(ipfs add --pin=false -r -Q --progress -w "$@")
    if [[ $# == 1 ]]; then
      printf 'IPFS: %s/ipfs/%s/%s\n' $IPFS_GATEWAY $hash "$(basename $1 | sed 's, ,%20,g')"
    else
      printf 'IPFS: %s/ipfs/%s\n' $IPFS_GATEWAY $hash
    fi
  fi

  local munged_name="$(echo "$name" | tr / '\\')"
  ipfs files mkdir -p /.old-shares/$munged_name
  if share/exists $munged_name; then
    share/archive $munged_name
  fi
  ipfs files cp /ipfs/$hash /.shares/$munged_name
}

# share/exists name
# true if a share with that name exists
function share/exists {
  ipfs files ls /.shares | fgrep -qx "$1"
}

# share/archive name
# archive a share to /.old-shares/$name/$date
# this ensures that links to old versions of the share will continue to work
# even if garbage collection runs.
function share/archive {
  ipfs files mv /.shares/$1 /.old-shares/$1/"$(date +'%Y-%m-%d %H:%M:%S')"
}

function share/cmd-add-zip {
  local zipname="$1"; shift
  if [[ $zipname =~ / ]] || [[ $zipname != *.zip ]]; then
    share/die "The first argument to add-zip must be a .zip file name with no slashes."
  fi
  printf 'Name: %s\n' "$zipname"
  local hash=$(zip -q -0 -r - "$@" | ipfs add --pin=false -Q --progress)
  ipfs files mkdir -p /.old-shares/$munged_name
  if share/exists $zipname; then
    share/archive $zipname
  fi
  ipfs files mkdir /.shares/$zipname
  ipfs files cp /ipfs/$hash /.shares/$zipname/$zipname
  local dirhash=$(ipfs files stat --hash /.shares/$zipname)
  printf 'IPFS: %s/ipfs/%s/%s\n' $IPFS_GATEWAY $dirhash $zipname
}

function share/paths-to-name {
  if [[ $# == 1 ]]; then
    if [[ -d "$1" ]]; then
      printf "%s/" "$(realpath "$1")"
    else
      realpath "$1"
    fi
  else
    local hash=$(printf '%s\n' "$@" | xargs -d\\n realpath | sort | sha1sum | cut -c1-8)
    local prefix=$(printf '%s\n' "$@" | xargs -d\\n realpath | sort | head -n1)
    if [[ -f $prefix ]]; then
      prefix="$(dirname $prefix)"
    fi
    # This is kind of gross.
    # TODO: come up with a better naming scheme for ad hoc dirs.
    printf '%s/<%d items>@%s' "$prefix" "$#" "$hash"
  fi
}

# List all shares by name.
# If no arguments specified, lists all shares with their hashes.
# If arguments specified, shows only shares matching those args (as `grep`) and
# lists their name, IPFS path, IPNS path, and contents.
function share/cmd-ls {
  if [[ $1 ]]; then
    ipfs files ls /.shares | grep "$@" | share/cmd-ls/contents
  else
    ipfs files ls /.shares | tr '\\' /
  fi
}

# Read keys from stdin and list their names, IPFS/IPNS paths and contents.
function share/cmd-ls/contents {
  while read -r name; do
    local hash=$(ipfs files stat --hash /.shares/$name)
    local count=$(ipfs files ls /.shares/$name | wc -l)
    local old_count=$(ipfs files ls /.old-shares/$name | wc -l)
    printf '\n'
    printf 'Name: %s\n' "$(printf '%s' $name | tr '\\' /)"
    if (( old_count )); then
      printf 'Old versions: %d\n' "$(ipfs files ls /.old-shares/$name | wc -l)"
    fi
    if (( count == 1 )); then
      printf 'IPFS: %s/ipfs/%s/%s\n' \
        $IPFS_GATEWAY $hash "$(ipfs files ls /.shares/$name | sed -E 's, ,%20,g')"
    else
      printf 'IPFS: %s/ipfs/%s\n' $IPFS_GATEWAY $hash
      ipfs files ls /.shares/$name | sed -E 's,^,    ,'
    fi
  done
}

# share rm name-or-id
# Remove share matching the given name or ID.
# No globbing/regex support yet.
function share/cmd-rm {
  local name
  while [[ $1 ]]; do
    name="$(echo "$1" | tr / '\\')"
    if ! ipfs files ls /.shares | fgrep -qx "$name"; then
      share/die "No share found with name '$1'."
    fi
    ipfs files rm -r /.shares/"$name"
    ipfs files rm -r /.old-shares/"$name"
    shift
  done
}

function share/cmd-gc {
  ipfs repo gc
}

exec share/main "$@"
