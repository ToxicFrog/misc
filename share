#!/usr/bin/env zsh
#
# share -- hash-based file sharing
#
# Can share individual files, directories, or ad hoc collections of files and/or
# directories (which will be automatically wrapped in a directory).
#
# See `share help` for usage information.

# Information about the share itself is stored in a .share file inside the
# share directory, with mode 0600. It's one entry per line, tab separated;
# the same key can occur multiple times.
# Currently, name, hash, and pwd (the working directory when `share` was
# invoked) are stored.
# Planned features:
# - share creation command (add, add-zip, add-album)
# - arguments
# - expiration date (once expiring shares are implemented)
# - cache location (once gallery caches are implemented)
# In particular, having the command and arguments stored means that you can
# run `share refresh name` and it'll automatically figure out what directory
# to cd into and what command to run to refresh/replace it.

# TODO: "persistent" mode, that keeps the generated gallery around for
# incremental updates and remembers what arguments it was invoked with.
# TODO: "ephemeral" mode, that is automatically deleted after a certain number
# of days (when share is run).
# TODO: share aliasing (using symlinks) -- removing the share needs to remove the
# aliases as well!
# TODO: share renaming (with option to alias the old name)

set -e
setopt no_function_argzero

SHARE_PATH=${SHARE_PATH:=/srv/www/share}
SHARE_URL="https://ancilla.ancilla.ca/share"
PROGNAME="$(basename $0)"

missing=""
for prog in xxd pv fgallery rsync exiftool convert; do
  if ! &>/dev/null type $prog; then
    missing="$missing $prog"
  fi
done
if [[ $missing ]]; then
  echo "This script requires the following tools, but can't find them:$missing" >&2
  exit 1
fi

function main {
  local cmd="$1"; shift
  while [[ $1 ]]; do
    case $1 in
      -n) local SHARE_NAME="$2"; shift 2;;
      --) shift; break;;
      -*) die "Unknown option '$1'";;
      *) break;;
    esac
  done
  if (( ${+functions[cmd/$cmd]} )); then
    cmd/$cmd "$@"
  else
    die "Unknown command '$cmd'. Try '$PROGNAME help'."
  fi
}

## share help [command]
# List available commands, or display help for a specific command.
function cmd/help {
  if [[ "$1" ]]; then
    # display command-specific help
    cat "$0" | sed -n -E "
      /^## $PROGNAME $1[ $]/,/^function/ {
        /^function/ d
        s,^## (.*),\n    \1\n,
        s,^# ,  ,
        p
      }
    "
  else
    # List all commands
    echo "$PROGNAME -- a simple hash-based web sharing program."
    echo "Usage:"
    cat "$0" | sed -n -E '/^## /,+1 { s,^## ,  ,; s,^# ,    ,; p }'
  fi
}

### Library functions ###

# Print arguments to stderr and then exit.
function die {
  >&2 printf '%s\n' "$@"
  exit 1
}

# Generate a hash from the arguments.
# Internally, it's sha256sum in base64 with url-hostile characters replaced.
# Hash is based on UID + share name, so different people sharing the same thing
# have different share hashes.
# TODO: stronger salting?
function share/hash {
  printf '%s%s' "$UID" "$*" | sha256sum | cut -d' ' -f1 | xxd -r -p | base64 | tr '+/' '-_'
}

# True if a share with the given name exists.
function share/exists {
  [[ -e "$SHARE_PATH/$(share/hash $1)" ]]
}

# share/register hash name
function share/register {
  local hash=$1; shift
  install -m 0600 /dev/null "$SHARE_PATH/$hash/.share"
  while [[ $1 ]]; do
    share/cfg-set $hash "$1" "$2"
    shift 2
  done
}

function share/paths-to-name {
  if [[ $SHARE_NAME ]]; then
    printf '%s' "$SHARE_NAME"
    return
  fi
  if [[ $# == 1 ]]; then
    if [[ -d "$1" ]]; then
      # Single directory argument: realpath with / suffix
      printf "%s/" "$(realpath "$1")"
    else
      # Single file argument: realpath with no suffix
      realpath "$1"
    fi
  else
    # This is so gross I'm just forbidding it for now.
    share/die "If you're sharing multiple things you need to specify a name with -n"
    # Multiple file and/or directory arguments. This needs work.
    # At the moment, the name is the first (lexical) argument with the first eight
    # characters of the sha1sum of all the arguments appended.
    local hash=$(printf '%s\n' "$@" | xargs -d\\n realpath | sort | sha1sum | cut -c1-8)
    local prefix=$(printf '%s\n' "$@" | xargs -d\\n realpath | sort | head -n1)
    # This is kind of gross.
    # TODO: come up with a better naming scheme for ad hoc dirs.
    printf '%s/<%d items>@%s' "$prefix" "$#" "$hash"
  fi
}

### Command implementations ###

## share add [-n name] <directory|files-and-directories...>
# Create or update a share.
# If a single directory is specified, shares that directory as is.
# If a single file or multiple arguments are specified, wraps them in a directory
# and shares that.
function cmd/add {
  # TODO: if a share by that name already exists, re-use the hash for that share.
  # TODO: normalize trailing slash handling WRT rsync use.
  local name=$(share/paths-to-name "$@")
  local hash=$(share/hash $name)
  if [[ $# == 1 && -d "$1" ]]; then
    # Add single directory
    command rsync -a --delete --info=progress2 "$1/" "$SHARE_PATH/$hash/"
    printf 'Name: %s\n' $name
    printf ' URL: %s/%s/\n' "$SHARE_URL" "$hash"
  else
    # One file, or multiple files and/or directories.
    # As with rsync, a trailing slash on directory arguments means "merge into"
    # and a lack of trailing slash means "copy into".
    command rsync -a --delete --info=progress2 "$@" "$SHARE_PATH/$hash/"
    printf 'Name: %s\n' $name
    if [[ $# == 1 ]]; then
      # Added single file
      printf ' URL: %s/%s/%s\n' "$SHARE_URL" "$hash" "$(basename $1 | sed 's, ,%20,g')"
    else
      # Added multiple files or dirs
      printf ' URL: %s/%s/\n' "$SHARE_URL" "$hash"
    fi
  fi

  share/register "$hash" \
    hash "$hash" \
    name "$name" \
    pwd "$PWD"
  for arg in "$@"; do
    share/cfg-add "$hash" arg "$arg"
  done
}

# Add a source image ($2) to a gallery input directory ($1)
# Image types supported by fgallery are symlinked in.
# GIFs have a PNG thumbnail extracted and inserted.
function share/add-source-image {
  case "$(echo $2 | tr A-Z a-z)" in
    *.jpg|*.jpeg|*.png|*.tif|*.tiff)
      ln -s -r -f -t "$1" "$2"
      ;;
    *.gif)
      local frames=$(identify $2 | wc -l)
      if (( frames > 1 )); then
        local name=$(basename $2 | sed -E 's,\.gif$,,i')
        local size=$(convert "$2[0]" -format "%wx%h" info:)
        convert "$2[0]" \
          \( $HOME/devel/misc/play-circle.svg \
              -resize "$size" -resize "50%" \
              -gravity Center -negate \
          \) \
          -compose difference -composite "$1/$name.jpeg"
      else
        convert "$2" "$1/$name.jpeg"
      fi
      # Output the name of the renamed/converted file so the caller can
      # replace it later.
      echo "$name"
      ;;
    *.mp4)
      local name=$(basename $2 | sed -E 's,\.mp4$,,i')
      # extract thumbnail from frame 30
      </dev/null ffmpeg -hide_banner -loglevel quiet -i "$2" -vf "select=gte(n\,30)" -vframes 1 "$1/$name.thumb.jpeg"
      local size=$(convert "$1/$name.thumb.jpeg" -format "%wx%h" info:)
      convert "$1/$name.thumb.jpeg" \
        \( $HOME/devel/misc/play-circle.svg \
            -resize "$size" -resize "50%" \
            -gravity Center -negate \
        \) \
        -compose difference -composite "$1/$name.jpeg"
      rm "$1/$name.thumb.jpeg"
      echo "$name"
      ;;
    *)
      echo "Skipping: $2" >&2
      ;;
  esac
}

## share add-album <files-and-directories...>
# Generates an HTML+JS album from image files and shares that.
# If given directories, searches under them for image files and adds everything
# that it finds to the album. If multiple files occur with the same basename,
# it picks one effectively at random (!).
# Makes the original images available for download, but strips EXIF metadata
# from them first.
# GIFs and MP4 video are added to the gallery as thumbnails with a (>) overlay
# such that clicking on it takes you to the original file.
function cmd/add-album {
  local name=$(share/paths-to-name "$@")
  local hash=$(share/hash $name)

  echo "Generating gallery files..."
  trap "rm -rf /tmp/$$ /tmp/$$.fgallery" EXIT
  mkdir /tmp/$$
  # TODO: this unconditionally overwrites duplicates. Option to merge instead?
  local -A replacements
  find "$@" -type f | while read file; do
    if [[ ! -e "$file" ]]; then
      echo "Warning: $file vanished during scan!"
    fi
    local replacement=$(share/add-source-image "/tmp/$$" "$file" | tr ' .' '__')
    if [[ $replacement ]]; then
      replacements[$file]="$replacement.jpeg"
    fi
  done
  # TODO: optional -f for face detection?
  # Generate gallery
  fgallery -j 4 -i -d --max-full 1024x1024 /tmp/$$ /tmp/$$.fgallery
  # Replace "fake" originals with the real originals
  for original replacement in "${(@kv)replacements}"; do
    echo "Replacement: $original <-> $replacement"
    rm "/tmp/$$.fgallery/files/$replacement"
    install -m 644 "$original" /tmp/$$.fgallery/files/
    sed -Ei 's,"files/'"$replacement"'","files/'"$(basename $original)"'",' /tmp/$$.fgallery/data.json
  done
  # Remove EXIF data from original JPEG files
  exiftool -all= -overwrite_original /tmp/$$.fgallery/files/*
  command rsync -a --delete --info=progress2 "/tmp/$$.fgallery/" "$SHARE_PATH/$hash/"

  printf 'Name: %s\n' $name
  printf ' URL: %s/%s/\n' "$SHARE_URL" "$hash"

  share/register "$hash" \
    hash "$hash" \
    name "$name" \
    pwd "$PWD"
  for arg in "$@"; do
    share/cfg-add "$hash" arg "$arg"
  done
}

## share add-zip <name.zip> <list of files/dirs...>
# Like add, but zips all of the inputs first.
# The name argument must be an unqualified zip file name.
# Contents are currently zipped without compression; this is an aggregation
# tool, not a compression one.
function cmd/add-zip {
  local name=$1; shift
  local hash=$(share/hash $name)
  if [[ $name =~ / ]] || [[ $name != *.zip ]]; then
    die "The first argument to add-zip must be a .zip file name with no slashes."
  fi

  mkdir -p "$SHARE_PATH/$hash"
  zip -q -0 -r - "$@" | pv > "$SHARE_PATH/$hash/$name"
  printf 'Name: %s\n' $name
  printf ' URL: %s/%s/%s\n' "$SHARE_URL" "$hash" "${name// /%20}"

  share/register "$hash" \
    hash "$hash" \
    name "$name" \
    pwd "$PWD"
  for arg in "$@"; do
    share/cfg-add "$hash" arg "$arg"
  done
}

# share config manipulation functions
# the config is stored as a multimap, one line per entry, k-v tab separated

# cfg-get <hash> <key>
function share/cfg-get {
  egrep "^$2" "$SHARE_PATH/$1/.share" | cut -f2-
}

# cfg-set <hash> <key> <value>
function share/cfg-set {
  share/cfg-del $1 $2
  share/cfg-add $1 $2 $3
}

# cfg-del <hash> <key>
function share/cfg-del {
  sed -i -E "/^$2/ d" "$SHARE_PATH/$1/.share"
}

# cfg-add <hash> <key> <value>
function share/cfg-add {
  printf '%s\t%s\n' "$2" "$3" >> "$SHARE_PATH/$1/.share"
}

## share ls [grep arguments...]
# List shares or display information about a share.
# With no arguments, lists all shares with their hashes.
# With arguments, interprets them as `grep` does and lists detailed information
# about all shares with names that match those arguments.
function cmd/ls {
  if [[ $1 ]]; then
    share/ls-detail "$@"
  else
    find $SHARE_PATH -mindepth 1 -maxdepth 1 \
        -user $UID -type d -printf '%f\n' | while read hash; do
      printf '%s %s\n' \
        "$(share/cfg-get $hash hash)" \
        "$(share/cfg-get $hash name)"
    done | sort -k2
  fi
}

# Read keys from stdin and list their names, URLs and info about the contents.
function share/ls-detail {
  cmd/ls | grep "$@" | while read -r hash name; do
    local count=$(find $SHARE_PATH/$hash -type f | wc -l)
    local size=$(du -sh --apparent-size $SHARE_PATH/$hash | cut -f1)
    printf '\n'
    printf 'Name: %s\n' $name
    printf 'Size: %s (%d files)\n' $size $count
    if (( count == 1 )); then
      printf ' URL: %s/%s/%s\n' $SHARE_URL $hash $(ls -A $SHARE_PATH/$hash | sed -E 's, ,%20,g')
    else
      printf ' URL: %s/%s/\n' $SHARE_URL $hash
    fi
  done
}

## share rm <name>
# Delete a share.
function cmd/rm {
  while [[ $1 ]]; do
    if ! share/exists $1; then
      die "No share with name '$1'"
    fi
    local hash="$(share/hash $1)"
    echo "Removing $1 ($hash)"
    rm -rf "$SHARE_PATH/$hash"
    shift
  done
}

### Entry point ###

exec main "$@"
