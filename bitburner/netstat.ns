// version:1
// Display tree of reachable network systems and information about them.

import {initlib,netwalk,tprintf} from "lib.ns";

let ns;

export async function main(n) {
  ns = n;
  initlib(ns);
  ns.disableLog("sleep");

  let maxdepth = Number(ns.args[0]) || 1;

  await scanHosts(maxdepth);
}

async function scanHosts(maxdepth) {
  tprintf("%-18s  %s %s %s  ยง%4s/%-4s  %s %15s",
    "hostname", "P", "Hck", "R", "Cur", "Min", "$Ratio", "$Total");
  async function checkHost(host, depth) {
    let stat = scanHost(host);
    tprintf("%-18.18s  %d %3d %s   %4d/%-4d  (%0.2f) %18s",
      " ".repeat(depth) + host,
      stat.ports, stat.hack_level, stat.root ? "R" : " ",
      stat.security, stat.min_security,
      stat.money/stat.max_money, stat.money.toLocaleString(undefined, {maximumFractionDigits:0}));
    return (depth < maxdepth);
  }

  await netwalk(checkHost, "home");
}

// Scan a single host. Updates its info{} entry and returns the new entry.
function scanHost(host) {
  let stat = {};
  stat.name = host;
  stat.root = ns.hasRootAccess(host);
  stat.ports = ns.getServerNumPortsRequired(host);
  stat.ram = ns.getServerRam(host)[0];
  stat.ram_used = ns.getServerRam(host)[1];
  stat.security = ns.getServerSecurityLevel(host);
  stat.min_security = ns.getServerMinSecurityLevel(host);
  stat.money = ns.getServerMoneyAvailable(host);
  stat.max_money = ns.getServerMaxMoney(host);
  stat.hack_level = ns.getServerRequiredHackingLevel(host);
  stat.hack_fraction = ns.hackAnalyzePercent(host)/100;
  return stat;
}
