// Script to upgrade the autohacker script on a remote server.
// Usage: run upgrade.script autohacker.script [root [hops]]
// For each server, outputs DONE if an upgrade was performed,
// ---- if no upgrade was performed, or a word indicating why
// the upgrade wasn't performed.
// On ERROR it just means that deploy() failed and we don't know why.
import {initlib,netwalk,tprintf,deploy,tryPwn,getSourceVersion} from "lib.ns";

function checkAccess(ns, host) {
    if (!tryPwn(host))
        return "PORT  " + ns.getServerNumPortsRequired(host);

    // TODO: check this after we drop the spike and use it to decide whether
    // to deploy a hack on this server or targeting a different one.
    if (ns.getHackingLevel() < ns.getServerRequiredHackingLevel(host))
        return "HACK  " + ns.getServerRequiredHackingLevel(host);

    return false;
}

function checkVersion(ns, host, payload, version) {
    // Server is idle.
    if (ns.getServerRam(host)[1] === 0) return false;
    // Server is running something else.
    if (!ns.scriptRunning(payload, host)) return "BUSY";
    // Server is already running this version!
  if (ns.isRunning(payload, host, host, version)) return "----";
    return false;
}

export async function main(ns) {
    initlib(ns);
    var payload = ns.args[0];
    var root = ns.args[1] || ns.getHostname();
    var maxdepth = Number(ns.args[2]) || 3;
    var version = getSourceVersion(payload);

    tprintf("Upgrading all hosts within %d hops of %s to %s %s...",
            maxdepth, root, payload, version);

    async function upgrade(host, depth) {
        if (depth > maxdepth) return false;

        let failure = checkAccess(ns, host)
          || checkVersion(ns, host, payload, version);
        if (failure) {
            if (failure != "----")
                tprintf("%-24s %s", " ".repeat(depth) + host, failure);
            return true;
        }

        ns.killall(host);
        while (ns.scriptRunning(payload, host)) {
          await ns.sleep(100);
        }
        var result = await deploy(host, payload, host, version);
        if (result) {
            tprintf("%-24s %s", " ".repeat(depth) + host, "DONE");
        } else {
            tprintf("%-24s %s", " ".repeat(depth) + host, "ERRR");
        }
        return true;
    }
    await netwalk(upgrade, root);
    tprintf("Done upgrading!");
}
