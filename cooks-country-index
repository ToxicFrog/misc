#!/usr/bin/env zsh
# Fetch/update a recipe index for Cook's Country.

# Issue: title, cover image, and list of recipes.
# Recipe: title, blurb, image, "why it works"
# UI: a list of issues; click on an issue to expand and display the list of recipes with blurbs.
# search box at the top; typing in a search automatically filters to only recipes matching the search and issues containing those recipes, and automatically expands those issues.

set -e

OUTPUT=/srv/www/archives/cooks-country/

# attr html field -> returns contents of field
function attr {
  print -r "$1" | egrep -o " $2=\"[^\"]+\"" | cut -d'"' -f2 | head -n1
}

function sanitize {
  print -r "$1" | tr ' /\t' '_'
}

function html {
  >>"$OUTPUT/index.html" printf "$@"
}

function unescape {
  print -r "<div>$*</div>" | wring text - //div
}

mkdir -p "$OUTPUT"

cat > "$OUTPUT/style.css" <<EOF
table {
  border-collapse: collapse;
  table-layout: auto;
}
div.header {
  position: sticky;
  background-color: #A0A0A0;
  top: 0px;
}
div.header > img {
  position: absolute;
  right:160px;
}
div.header-title {
  text-align: center;
  vertical-align: middle;
  font-weight: bold;
}
td {
  border-bottom: 1px solid black;
  padding: 10px;
  text-align: left;
}
td.finished {
  text-decoration: line-through;
}
img.finished {
  filter:grayscale(100%%);
}
.cooked.finished {
  font-weight: bold;
  text-shadow: 0px 0px 5px #F00;
}
.written.finished {
  font-weight: bold;
  text-shadow: 0px 0px 5px #08F;
}
EOF

echo "Fetching master index..."
issues="$(curl -s 'https://www.cookscountry.com/magazines/browse' | wring html - .result__image-link)"
# issues="$(cat /tmp/ck/browse)"
print -r "$issues" | tac | while read -r issue; do
  title="$(attr "$issue" title)"
  url="$(attr "$issue" href)"
  img="$(attr "$issue" data-src)"

  out="$OUTPUT/$(sanitize "$title")"
  [[ -f "$out/done" ]] && continue;

  echo -n "Fetching $title:"
  rm -f "$out/index"
  mkdir -p "$out"
  print -r "$title" > "$out/title"

  # Fetch cover if missing
  [[ -f "$out/cover.jpeg" ]] || {
    echo -n " cover"
    curl -s "$img" > "$out/cover.jpeg"
    echo -n "."
  }

  # Fetch recipe images and write issue index file
  recipes="$(curl -s "https://www.cookscountry.com$url" \
    | wring html - .recipe \
    | fgrep -v result__online-extra \
    | lua -e 'print((io.read("*a"):gsub("\r",""):gsub("([^>])\n+", "%1 ")))')"
  echo -n " recipes"
  print -r "$recipes" | while read -r recipe; do
    title="$(attr "$recipe" title)"
    title="$(unescape "$title")"
    img="$(attr "$recipe" data-src)"
    desc="$(print -r "$recipe" | wring text - .result__description)"
    splash="$(sanitize "$title").jpeg"
    [[ -f "$out/$splash" ]] || {
      if [[ $img ]] then
        curl -s "$img" > "$out/$splash"
      else
        curl -s "https://cataas.com/cat?width=120&height=120" > "$out/$splash"
      fi
    }
    printf '%s\t%s\t%s\n' "$splash" "$title" "$desc" >> "$out/index"
    echo -n "."
  done

  if [[ $(cat $out/index | wc -l) -lt 4 ]]; then
    # An issue with few/no recipes? Probably this is one of those cases where
    # they return multiple copies of an issue in the search, but only one of them
    # is valid.
    echo $out
    ls $out
    #rm -f "$out/index" "$out/done" "$out/cover.jpeg"
    echo "error!"
    exit 1
    continue
  fi

  touch "$out/done"
  echo ""
  # break
done

echo -n "Generating top-level HTML"
rm -rf "$OUTPUT/index.html"
html "
  <html>
    <head>
      <title>Cook's Country Index</title>
      <link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\">
      <meta charset=\"UTF-8\">
    </head>
      <script>
        const COOKED = 'COOKED';
        const WRITTEN = 'WRITTEN';
        function toggle_state(button, field) {
          const id = button.id.split(':')[1];
          var state = String(localStorage.getItem(id));
          if (!state || state == 'null') state = '__';
          if (state == 'COOKED') state = 'C_';
          if (state == 'WRITTEN') state = 'CW';

          if (field == 'COOKED') {
            if (state[0] == 'C') {
              state = '_' + state[1];
            } else {
              state = 'C' + state[1];
            }
          } else if (field == 'WRITTEN') {
            if (state[1] == 'W') {
              state = state[0] + '_';
            } else {
              state = state[0] + 'W';
            }
          }
          localStorage.setItem(id, state);
          apply_state(id, state);
        }
        function apply_state(id, state) {
          if (!state || state == 'null') state = '__';
          if (state == 'COOKED') state = 'C_';
          if (state == 'WRITTEN') state = 'CW';

          // Text is crossed out and image greyed out if both cooked and written.
          document.getElementById('text:'+id).classList.toggle('finished', state == 'CW');
          document.getElementById('img:'+id).classList.toggle('finished', state == 'CW');
          // Set cooked checkbox and flair
          document.getElementById('cb:cooked:'+id).checked = (state[0] == 'C');
          document.getElementById('cooked:'+id).classList.toggle('finished', state[0] == 'C');
          // Set written checkbox and flair
          document.getElementById('written:'+id).classList.toggle('finished', state[1] == 'W');
          document.getElementById('cb:written:'+id).checked = (state[1] == 'W');
        }
        function restore_state(img) {
          const id = img.id.split(':')[1];
          apply_state(id, String(localStorage.getItem(id)));
        }
      </script>
    <body>
"

ls -t "$OUTPUT" | fgrep -v index.html | fgrep -v style.css | while read -r issue; do
  # [[ -f "$issue/done" ]] || continue
  html '
    <div class="header">
      <img src="%s" width=120px>
      <div class="header-title">%s</div>
    </div>
    <table>
  ' "$issue/cover.jpeg" "$(cat "$OUTPUT/$issue/title")"
  cat "$OUTPUT/$issue/index" | while IFS=$'\t' read -r splash title desc; do
    splash="${splash//\"/%22}"
    id="$issue/${splash%.*}"
    html '
      <tr>
        <td id="text:%s" colspan=2 width=100%%><b>%s</b><br>%s</td>
        <td style="text-align:right;">
          <img id="img:%s" src="%s" height=80px onload="restore_state(this);">
        </td>
        <td>
          <span id="cooked:%s" class="cooked">
            <input id="cb:cooked:%s" type="checkbox" onchange="toggle_state(this.parentElement, COOKED);">
            <label>üç¥</label>
          </span><br>
          <span id="written:%s" class="written">
            <input id="cb:written:%s" type="checkbox" onclick="toggle_state(this.parentElement, WRITTEN);">
            <label>üóí</label>
          </span>
        </td>
      </tr>
    ' "$id" "$title" "$desc" "$id" "$issue/$splash" "$id" "$id" "$id" "$id"
  done
  html '</table>'
  echo -n "."
  # ;break
done
html "</body></html>"
echo ""
