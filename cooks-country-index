#!/usr/bin/env zsh
# Fetch/update a recipe index for Cook's Country.

# Issue: title, cover image, and list of recipes.
# Recipe: title, blurb, image, "why it works"
# UI: a list of issues; click on an issue to expand and display the list of recipes with blurbs.
# search box at the top; typing in a search automatically filters to only recipes matching the search and issues containing those recipes, and automatically expands those issues.

set -e

OUTPUT=/srv/www/archives/cooks-country/

# attr html field -> returns contents of field
function attr {
  print -r "$1" | egrep -o " $2=\"[^\"]+\"" | cut -d'"' -f2 | head -n1
}

function sanitize {
  print -r "$1" | tr ' /\t' '_'
}

function html {
  >>"$OUTPUT/index.html" printf "$@"
}

function unescape {
  print -r "<div>$*</div>" | wring text - //div
}

mkdir -p "$OUTPUT"


echo "Fetching master index..."
issues="$(curl -s 'https://www.cookscountry.com/magazines/browse' | wring html - .result__image-link)"
# issues="$(cat /tmp/ck/browse)"
print -r "$issues" | tac | while read -r issue; do
  title="$(attr "$issue" title)"
  url="$(attr "$issue" href)"
  img="$(attr "$issue" data-src)"

  out="$OUTPUT/$(sanitize "$title")"
  [[ -f "$out/done" ]] && continue;

  echo -n "Fetching $title:"
  rm -f "$out/index"
  mkdir -p "$out"
  print -r "$title" > "$out/title"

  # Fetch cover if missing
  [[ -f "$out/cover.jpeg" ]] || {
    echo -n " cover"
    curl -s "$img" > "$out/cover.jpeg"
    echo -n "."
  }

  # Fetch recipe images and write issue index file
  recipes="$(curl -s "https://www.cookscountry.com$url" \
    | wring html - .recipe \
    | fgrep -v result__online-extra \
    | lua -e 'print((io.read("*a"):gsub("\r",""):gsub("([^>])\n+", "%1 ")))')"
  echo -n " recipes"
  print -r "$recipes" | while read -r recipe; do
    title="$(attr "$recipe" title)"
    title="$(unescape "$title")"
    img="$(attr "$recipe" data-src)"
    desc="$(print -r "$recipe" | wring text - .result__description)"
    splash="$(sanitize "$title").jpeg"
    [[ -f "$out/$splash" ]] || {
      if [[ $img ]] then
        curl -s "$img" > "$out/$splash"
      else
        curl -s "https://cataas.com/cat?width=120&height=120" > "$out/$splash"
      fi
    }
    printf '%s\t%s\t%s\n' "$splash" "$title" "$desc" >> "$out/index"
    echo -n "."
  done

  if [[ $(wc -l $out/index) < 4 ]]; then
    # An issue with few/no recipes? Probably this is one of those cases where
    # they return multiple copies of an issue in the search, but only one of them
    # is valid.
    rm -f "$out/index" "$out/done" "$out/cover.jpeg"
    echo "error!"
    continue
  fi

  touch "$out/done"
  echo ""
  # break
done

echo -n "Generating top-level HTML"
rm -rf "$OUTPUT/index.html"
html "
  <html>
    <head>
      <title>Cook's Country Index</title>
      <meta charset=\"UTF-8\">
    </head>
      <script>
        // OFF: cooked -> COOKED, written -> WRITTEN
        // COOKED: cooked -> OFF, written -> WRITTEN
        // WRITTEN: cooked -> OFF, written -> COOKED
        const NULL = 'null';
        const COOKED = 'COOKED';
        const WRITTEN = 'WRITTEN';
        function toggle_state(button, if_null, if_cooked, if_written) {
          const id = button.id.split(':')[1];
          var state = String(localStorage.getItem(id));
          if (state == 'null') {
            state = if_null;
          } else {
            state = state == 'WRITTEN' ? if_written : if_cooked;
          }
          localStorage.setItem(id, state);
          apply_state(id, state);
        }
        function apply_state(id, state) {
          document.getElementById('text:'+id).classList.toggle(
            'finished', state == 'WRITTEN');
          document.getElementById('img:'+id).classList.toggle(
            'finished', state != 'null');
          document.getElementById('cooked:'+id).classList.toggle(
            'finished', state != 'null');
          const written = document.getElementById('written:'+id).classList.toggle(
            'finished', state == 'WRITTEN');
        }
        function restore_state(img) {
          const id = img.id.split(':')[1];
          apply_state(id, String(localStorage.getItem(id)));
        }
      </script>
    <body>
"
html '
  <style>
    table {
      border-collapse: collapse;
    }
    td, th {
      border-bottom: 1px solid black;
      padding: 10px;
      text-align: left;
    }
    th {
      background-color: #A0A0A0;
    }
    td.finished {
      text-decoration: line-through;
    }
    img.finished {
      filter:grayscale(100%%);
    }
    .cooked.finished {
      font-weight: bold;
      text-shadow: 0px 0px 5px #F00;
    }
    .written.finished {
      font-weight: bold;
      text-shadow: 0px 0px 5px #08F;
    }
  </style>
'

ls -t "$OUTPUT" | fgrep -v index.html | while read -r issue; do
  # [[ -f "$issue/done" ]] || continue
  html '
    <table style="table-layout:auto;">
      <tr>
        <th style="width:1%%; text-align:left;">
          <img src="%s" width=120px>
        </th>
        <th colspan=3 style="width:100%%">%s</th>
      </tr>
  ' "$issue/cover.jpeg" "$(cat "$OUTPUT/$issue/title")"
  cat "$OUTPUT/$issue/index" | while IFS=$'\t' read -r splash title desc; do
    splash="${splash//\"/%22}"
    id="$issue/${splash%.*}"
    html '
      <tr>
        <td id="text:%s" colspan=2 width=100%%><b>%s</b><br>%s</td>
        <td style="text-align:right;">
          <img id="img:%s" src="%s" height=80px onclick="toggle_state(this);" onload="restore_state(this);">
        </td>
        <td>
          <label id="cooked:%s" class="cooked"
            onclick="toggle_state(this, COOKED, NULL, NULL);"
            >üç¥</label><br>
          <label id="written:%s" class="written"
            onclick="toggle_state(this, WRITTEN, WRITTEN, COOKED);"
            onload="apply_state_onload(this);"
            >üóí</label>
        </td>
      </tr>
    ' "$id" "$title" "$desc" "$id" "$issue/$splash" "$id" "$id"
  done
  html '</table>'
  echo -n "."
  # ;break
done
html "</body></html>"
echo ""
