#!/usr/bin/env zsh
#
# Wrapper around `task` to use it as a book diary management script.
#
# Uses UDFs for author, gender, genre.
# Task description == title, and annotations are used for notes.
#
# Intended usage is:
#   books add author:"C.J. Cherryh" genre:sf gender:f +reread Foreigner
#   ...go off and read it...
#   books 1 done
#   books annote "I really enjoyed this."
#   books bookstats genre
#
### New filters:
# year:XXXX
#   must be the first argument! equivalent to:
#   end.after:XXXX-01-01 end.before:(XXXX+1)-01-01
#
### New commands:
# books reset-config
# books grep <genre, author, or title regex>
# books <filter> bookstats <list of fields>
#   displays counted stats of the different field values, e.g.
#   `books year:2017 genre` shows you what % of books you read in 2017 were
#   what genre.
# books annote <text>
#   annotates the most recently finished book.
#
# TODO:
# - figure out if series tracking is useful, and if so, how (project field? UDA?)
# - figure out how to normalize the genre tree
# - convert & fields into multiline fields.

set -e
source $(dirname $(realpath $0))/tasklib.sh

export TASKRC=$HOME/Books/booklogrc
export YEAR=$(date +%Y)

function main {
  local isfinished="( +COMPLETED and end.after:$YEAR-01-01 and end.before:$((YEAR+1))-01-01 )"
  local isreading="( +ACTIVE and start.before:$((YEAR+1))-01-01 )"
  task/init-config books.defaults \
    "context.$YEAR=$(task/year-filter $YEAR)" \
    "context=$YEAR"
  task/dispatch "$@"
}

task/register new-year '^new-year$' books/new-year <<EOF

  $NAME new-year

Advance the book journal's internal year. It will not advance the current year
automatically on the new year, to make it easy to generate end of year reports
and the like; when you want to advance the year to the current year, use this
command.

(Note that books and annotations are always recorded with the correct date; the
"current year" only affects what books are displayed by default.)
EOF
function books/new-year {
  \task context define $YEAR "$(task/year-filter $YEAR)"
  \task context $YEAR
}

task/register grep '^grep' books/grep <<EOF

  $NAME grep <pattern> [report]

Display books where the author or description match the given pattern (as a
case-insensitive regex) in the given report format; if not specified, the report
defaults to "all".
EOF
function books/grep {
  shift
  \task rc.regex:yes rc.search.case.sensitive:no \
    "( author ~ '$1' or desc ~ '$1' )" "${2:=all}"
}

task/register cc '^cc' books/cc <<EOF

  $NAME cc ...

Alias for \`booklord ...\`.
EOF
function books/cc {
  shift
  exec booklord "$@"
}

task/register bookstats 'bookstats' books/bookstats <<EOF

  $NAME [filter] bookstats <field ...>

For all books that match the filter, report:
- the total number of books
- the number of unique authors
- all values of all listed fields, sorted by frequency, along with their counts
  and what % of all books in the filter have that value
Multivalued fields (e.g. books with multiple genres separated by &) will be
counted once for each value, so the total count for a given field may exceed
the number of books matched by the filter.

Note that the filter has an implicit +COMPLETED on it, i.e. only books that are
finished will be counted no matter what the filter is.
EOF
function books/bookstats {
  local FILTER=(+COMPLETED)
  while [[ $1 ]]; do
    if [[ $1 == bookstats ]]; then
      shift; break;
    fi
    FILTER+="$1"
    shift
  done

  # Get number of books and authors to use as a basis for the count.
  # This is somewhat complicated by the fact that _unique does not respect context.
  # So instead we use task/select, which does, and run it through uniq.
  # We also strip off "(tr)" and "(ed)" suffixes, so someone who is credited as
  # both an author and an editor is only counted once.
  local NROF_BOOKS=$(\task "${FILTER[@]}" count)
  local NROF_AUTHORS=$(task/select author author+ "${FILTER[@]}" \
    | sed -E 's, \(ed\),,g; s, \(tr\),,g' | sort | uniq | wc -l)
  printf '\x1B[1m%24s  %-4d (by %d authors)\x1B[0m\n' "BOOKS" "$NROF_BOOKS" "$NROF_AUTHORS"

  # Display prefix only if we have more than one field to collect stats for.
  local FIELD_PREFIX=''
  if (( $# > 1)); then
    FIELD_PREFIX=yes
  fi

  # Get number of occurrences of each value of each field.
  local SPLIT
  for field in "$@"; do
    FIELD_PREFIX="${FIELD_PREFIX:+$field:}"

    if [[ $field == "tags" ]]; then
      FIELD_PREFIX="${FIELD_PREFIX:++}"
      SPLIT=' '
    else
      SPLIT=' & '
    fi

    # FIXME: when processing authors, we should strip out (tr) and (ed) here too.
    task/select "$field" "$field+" "${FILTER[@]}" \
      | sed -E "s,$SPLIT,\n,g" | sort | uniq -c | sed -E "s,( +[0-9]+ +),\1${FIELD_PREFIX},"
  done | sort -r -g | while read count field; do
    printf '%24s  %-4d (%3.2f%%)\n' "$field" "$count" "$(\task calc "100.0*$count/$NROF_BOOKS")"
  done
}

function task/as-html {
  sed -E 's,$,<br>,'
}

task/register export 'export$' books/export <<EOF

  $NAME [...filters...] export

Export the selected entries in HTML format.
EOF
function books/export {
  shift -p
  printf '
    <style>
      td:empty {
        display: none;
      }
      tr:empty {
        display: none;
      }
    </style>
    <table border=4><tr><th>Finished</th><th>Title</th><th>Author</th></tr>
  '
  task/select uuid end+,entry+ "$@" \
  | task/printf '
    <tr bgcolor="#DDDDDD">
      <td style="width:fit-content;">%end.formatted%s</td>
      <td><b>%description.desc%s</b></td>
      <td style="width:fit-content;">%author%s</td>
    </tr>
    <tr><td colspan=4>%annotations|task/as-html%s</td></tr>
  '
  printf '</table>\n'
}

exec main "$@"
