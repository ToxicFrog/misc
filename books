#!/usr/bin/env zsh
#
# Wrapper around `task` to use it as a book diary management script.
#
# Uses UDFs for author, gender, genre.
# Task description == title, and annotations are used for notes.
#
# Intended usage is:
#   books add author:"C.J. Cherryh" genre:sf gender:f +reread Foreigner
#   ...go off and read it...
#   books 1 done
#   books annote "I really enjoyed this."
#   books bookstats genre
#
### New filters:
# year:XXXX
#   must be the first argument! equivalent to:
#   end.after:XXXX-01-01 end.before:(XXXX+1)-01-01
#
### New commands:
# books reset-config
# books grep <genre, author, or title regex>
# books <filter> bookstats <list of fields>
#   displays counted stats of the different field values, e.g.
#   `books year:2017 genre` shows you what % of books you read in 2017 were
#   what genre.
# books annote <text>
#   annotates the most recently finished book.
#
# TODO:
# - figure out if series tracking is useful, and if so, how (project field? UDA?)
# - figure out a good way to track booklord challenge categories
# - figure out how to normalize the genre tree

source $(dirname $(realpath $0))/tasklib.sh

export TASKRC=$HOME/Books/booklogrc

function main {
  init-config books.defaults
  process-year-filter "$@"; set -- "${TASK_ARGV[@]}"
  dispatch "$@"
}

function dispatch {
  case "$*" in
    grep*)
      shift
      \task rc.verbose:label,blank rc._forcecolor:on rc.detection:off all | head -n2
      \task rc.verbose:nothing rc.detection:off all | egrep -i "$@"
      ;;
    *bookstats*)
      # Usage: books <filter> bookstats <list of fields>
      bookstats "$@"
      ;;
    annote*)
      LAST=$(\task rc.verbose:nothing rc.report.one_field.sort:end+ one_field | tail -n1)
      shift
      \task $LAST annotate "$@"
      ;;
    reset-config)
      rm -v "$TASKRC"
      ;;
    challenges*|cc*)
      # `books cc all` == `booklord all`.
      # `cc` for Challenge Control? Mostly just because it's easy to type.
      shift
      exec booklord "$@"
      ;;
    *)
      \task "$@"
      ;;
  esac
}

function bookstats {
  local FILTER=()
  while [[ $1 ]]; do
    if [[ $1 == bookstats ]]; then
      shift; break;
    fi
    FILTER+="$1"
    shift
  done

  # Get number of books to use as a basis for the count.
  NROF=$(\task "${FILTER[@]}" count)
  NROF_AUTHORS=$(\task rc.verbose:nothing rc.report.one_field.columns:author "${FILTER[@]}" one_field | sort | uniq | wc -l)
  printf '\n\x1B[1m%24s  %-4d (by %d authors)\x1B[0m\n' "BOOKS" "$NROF" "$NROF_AUTHORS"

  # Display prefix only if we have more than one field to collect stats for.
  local FIELD_PREFIX=''
  if (( $# > 1)); then
    FIELD_PREFIX=yes
  fi

  # Get number of occurrences of each value of each field.
  local SPLIT
  for field in "$@"; do
    FIELD_PREFIX="${FIELD_PREFIX:+$field:}"

    if [[ $field == "tags" ]]; then
      FIELD_PREFIX="${FIELD_PREFIX:++}"
      SPLIT=' '
    else
      SPLIT=' & '
    fi

    \task rc.verbose:nothing rc.report.one_field.columns:"$field" "${FILTER[@]}" one_field \
      | sed -E "s,$SPLIT,\n,g" | sort | uniq -c | sed -E "s,( +[0-9]+ +),\1${FIELD_PREFIX},"
  done | sort -r -g | while read count field; do
    printf '%24s  %-4d (%3.2f%%)\n' "$field" "$count" "$(\task calc "100.0*$count/$NROF")"
  done
}

exec main "$@"
