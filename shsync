#!/usr/bin/env zsh

# Tool for primitive syncing, roughly equivalent to `rsync -tr --delete`, between
# two systems using only ssh, find, stat, and tar on the remote system.
# This is useful for downloading/uploading files from a remote system that has
# very limited utilities installed, and in particular doesn't support rsync, scp
# or sftp.

# Usage: shsync <send/recv> <localdir> <remotedir> <user@remotehost>
# Note that the local and remote directories are always in the same order, regardless
# of which one is the source and which one is the destination.

# n.b. if any of your filenames have newlines in them you're going to have a
# really bad time.

set -e

function shsync/main {
  if [[ $1 == "-n" ]]; then
    local DRY_RUN=1
    shift
  fi
  local op="$1"
  local local_path="$2"
  local remote_path="$3"
  local REMOTE="$4"

  cd "$local_path"
  case $op in
    send)
      shsync/sync "$local_path" "$remote_path" \
        shsync/list-local shsync/list-remote \
        shsync/send-file shsync/delete-remote
      ;;
    recv)
      shsync/sync "$remote_path" "$local_path" \
        shsync/list-remote shsync/list-local \
        shsync/recv-file shsync/delete-local
      ;;
    *)
      >&2 echo "Usage: shsync <send/recv> <local path> <remote path> <user@host>"
      exit 1
      ;;
  esac
}

# TODO replace with command line options
function shsync/ignored {
  if [[ ! $SHSYNC_IGNORE ]]; then
    return 1
  elif [[ "$1" =~ "$SHSYNC_IGNORE" ]]; then
    return 0
  fi
  return 1
}

# shsync/sync <src path> <dst path> \
#  <src path lister> <dst path lister> \
#  <file copier> <file deleter>
# underlying high-order function to do the actual sync
# takes as arguments the source and destination paths and the remote name
# function names to list the source and destination
# function names to stat individual files on the source and destination
# and a function to copy files from src to dst
function shsync/sync {
  local src="$1" dst="$2" \
    list_src="$3" list_dst="$4" \
    sync_file="$5" delete_file="$6"

  # Populate destination file list first, since we don't care about ordering.
  shsync/status "Listing destination files..."
  local -A dst_files
  $list_dst $dst | while read stat file; do
    dst_files[${file#./}]="$stat"
  done
  shsync/status 'Listing destination files: %d\n' "${#dst_files}"

  # Read the whole source file list up front because, for some reason, if we
  # try to stream it the ssh connection terminates after the first line and
  # things go quite badly indeed.
  # TODO: fix this.
  shsync/status "Listing source files..."
  local -A src_files
  $list_src $src | while read stat file; do
    src_files[${file#./}]="$stat"
  done
  shsync/status 'Listing source files: %d\n' "${#src_files}"

  local n=0
  # $list_src $src | while read file; do
  for file in "${(k)src_files[@]}"; do
    shsync/status 'Checking files: %d' "$((++n))"
    if shsync/ignored "$file"; then
      # skip ignored files, remove from destination map so we don't delete it
      # shsync/status 'I %s\n' "$file"
      unset "dst_files[$file]"
    elif [[ ${dst_files[$file]} ]]; then
      # check if files are equivalent and sync if not
      if [[ ${dst_files[$file]} != ${src_files[$file]} ]]; then
        shsync/status '> %s\n' "$file"
        $sync_file "$src" "$dst" "$file"
      fi
      unset "dst_files[$file]"
    else
      shsync/status '+ %s\n' "$file"
      $sync_file "$src" "$dst" "$file"
    fi
  done

  # delete files on receiver not on sender, unless ignored
  # may fail for empty directories, but should succeed on next run
  for file in ${(k)dst_files[@]}; do
    if shsync/ignored "$file"; then
      # shsync/status 'I %s\n' "$file"
    else
      shsync/status '- %s\n' "$file"
      if [[ ! $DRY_RUN ]]; then
        $delete_file "$dst/$file"
      fi
    fi
  done

  # clean up empty directories
  # shsync/status "Cleaning empty directories..."
  # find $dst -type d -empty -print
  shsync/status "Done.\\n"
}

function shsync/status {
  local fmt="$1"; shift
  printf '\x1B[2K\r'"$fmt" "$@"
}

# list-files absolute-path
# outputs the list with the following format:
# SIZE <sp> MODIFICATION_TIME <sp> FILENAME <lf>
function shsync/list-local {
  find . '(' -type f -or -type d ')' -print0 | xargs -0 stat -c '%s:%Y %n'
}

function shsync/list-remote {
  # ssh $REMOTE "cd ${(q)1}; find . -type f" | sed -E 's,^\./,,'
  ssh $REMOTE "cd ${(q)1}; find . '(' -type f -or -type d ')' -print0 | xargs -0 stat -c '%s:%Y %n'"
  # | sed -E 's,^regular file:,file:,'
}

# sync-file src-path dst-path relative-path
function shsync/send-file {
  # we can assume we're already in src-path
  if [[ ! $DRY_RUN ]]; then
    tar c --no-recursion -- "$3" | ssh "$REMOTE" "cd '$2'; tar x"
  fi
}

function shsync/recv-file {
  # we can assume we're already in dst-path
  if [[ ! $DRY_RUN ]]; then
    ssh "$REMOTE" "cd '$1'; tar c --no-recursion -- ${(q)3}" | tar x
  fi
}

# delete-file absolute-path
function shsync/delete-local {
  if [[ ! $DRY_RUN ]]; then
    rm -rf "$1"
  fi
}

function shsync/delete-remote {
  if [[ ! $DRY_RUN ]]; then
    ssh "$REMOTE" "rm -rf ${(q)1}"
  fi
}

shsync/main "$@"
