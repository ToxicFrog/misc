#!/usr/bin/env bash

set -e

MUSIC_DIR="${1:-/ancilla/media/music/Library}"
MP3_DIR="${2:-/ancilla/media/music/MP3}"
VGMPLAY_INI=/ancilla/media/music/vgmplay.ini

function safe_path() {
  tr '<>:"/\|?*' '[_*]'
}

# Helper function for converting VGM/VGZ files.
function vgm_to_mp3() {
  mkdir /tmp/$$.vgm
  pushd /tmp/$$.vgm

  vgm="$1"
  wav="${1%.vg?}.wav"
  mp3="$2"

  # set up vgmplay.ini
  # vgmplay will prefer the one it finds in ./ to the user/system ones.
  sed 's/^LogSound.*/LogSound = 1/' < "$VGMPLAY_INI" > vgmplay.ini

  # invoke vgmplay to convert vgm -> wav
  </dev/null >/dev/null vgmplay "$vgm"

  # now the wav is next to the original vgm/vgz file
  # invoke ffmpeg to encode it
  [[ -f "$wav" ]] || { echo "ERROR"; return 1; }
  </dev/null ffmpeg -y -i "$wav" -v error -stats -map 0:0 -q:a 0 -codec:a libmp3lame "$mp3"

  # cleanup
  popd
  rm "$wav"
  rm -rf /tmp/$$.vgm
  echo "DONE"
}

function ffmpeg_convert() {
  input="$1"
  output="$2"
  shift 2
  </dev/null ffmpeg -y -i "$input" -v error -nostats -map 0:0 "$@" -q:a 0 -codec:a libmp3lame "$output" || echo "[ERR] $input"
}

NTHREADS=4
# Spawn a background job iff the number of background jobs is <= NTHREADS.
function spawn() {
  while [[ $(jobs | wc -l) -ge $NTHREADS ]]; do
    sleep 1
  done
  "$@" &
}

# Keep a list of converted files here so we can find ones that are stale later.
> /tmp/$$.new

echo "Creating mp3s..."
find "$MUSIC_DIR/" -path "$MP3_DIR" -prune -o -print | while read -r src; do
  # Strip non-FAT characters from filenames so we can e.g. rsync this onto USB
  # keys without everything being terrible.
  relpath="${src#$MUSIC_DIR/}"
  dst="${MP3_DIR}/$(echo "$relpath" | tr '<>:"|?*' '[-*]')"
 # echo "$src"
 # echo "  == $relpath"
 # echo "  -> $dst"

  # Handle directories. Create mirrors of non-empty directories, skip empty ones.
  if [[ -d $src ]]; then
    if [[ $(ls -A "$src") && ! -e "$dst" ]]; then
      echo "[DIR] $dst"
      mkdir -p "$dst"
    fi
    continue
  fi

  # Handle files.
  # Cover files don't have their extensions changed, everything else becomes
  # an MP3.
  if ! [[ "$dst" =~ .*/cover\..* ]]; then
    dst="${dst%.*}.mp3"
  fi

  # Skip things that don't need to be updated
  if [[ -e $dst && ! $src -nt $dst ]]; then
    echo "$dst" | sed -E 's;/+;/;g' >> /tmp/$$.new
    continue
  fi

  case "$(echo "$src" | tr '[:upper:]' '[:lower:]')" in
    *.mp3)
      ln -sf "$src" "$dst"
      echo "[MP3] $src"
      ;;
    *.opus|*.ogg)
      # Use map_metadata to map metadata from stream0 to the whole file, since
      # OGG OPUS files have per-stream metadata and MP3s don't.
      spawn ffmpeg_convert "$src" "$dst" -map_metadata 0:s:0
      echo "[PCM] $src"
      ;;
    *.flac|*.m4a|*.mpc|*.wav|*.aif|*.aiff|*.wma)
      spawn ffmpeg_convert "$src" "$dst"
      echo "[PCM] $src"
      ;;
    *.xm|*.mod|*.s3m)
      spawn ffmpeg_convert "$src" "$dst"
      echo "[MOD] $src"
      ;;
    # *.vgm|*.vgz)
      #(vgm_to_mp3 "$src" "$dst")
      # spawn ffmpeg_convert "$src" "$dst"
      # echo "[VGM] $src"
      # ;;
    *.vgm|*.vgz|*.mid|*.midi)
      # File is recognized but we don't have a converter for it.
      echo "[!!!] $src"
      continue
      ;;
    */cover.*)
      echo "[CVR] $src"
      ln -sf "$src" "$dst"
      ;;
    *.txt|*.m3u|*.png|*.jpg)
      # skip
      continue
      ;;
    *)
      # File is not recognized.
      echo "[???] $src"
      continue
      ;;
  esac
  echo "$dst" | sed -E 's;/+;/;g' >> /tmp/$$.new
done

# Clean up all broken symlinks
echo "Cleaning up broken symlinks..."
find "$MP3_DIR" -depth \( \( -type l -xtype l \) -or \( -type d -empty \) \) -print -delete

# Clean up all non-symlink files that no longer correspond to files in MUSIC_DIR.
echo "Cleaning up stale converted files..."
find "$MP3_DIR" -type f -or -type l > /tmp/$$.all
cat /tmp/$$.new /tmp/$$.all | sort | uniq -u \
  | xargs -r -d\\n rm -fv

rm /tmp/$$.new /tmp/$$.all
echo "Done!"
